
L3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002714  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002840  08002840  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08002840  08002840  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002840  08002840  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002840  08002840  00012840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08002848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000038  08002880  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002880  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000955c  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b36  00000000  00000000  000295bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016bef  00000000  00000000  0002bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b876  00000000  00000000  0004274f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00082310  00000000  00000000  0004dfc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000d02d5  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000968  00000000  00000000  000d0328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002920  00000000  00000000  000d0c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08002808 	.word	0x08002808

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08002808 	.word	0x08002808

0800014c <update_modifyDuration_and_buffer>:
 *      Author: HELLO
 */

#include "input_processing.h"

void update_modifyDuration_and_buffer(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (isButtonPressed(BUTTON_MODIFY)){	// press button modify, only affect mode234
 8000150:	2001      	movs	r0, #1
 8000152:	f000 f9bf 	bl	80004d4 <isButtonPressed>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d03f      	beq.n	80001dc <update_modifyDuration_and_buffer+0x90>
		modifyingDuration += 100;
 800015c:	4b22      	ldr	r3, [pc, #136]	; (80001e8 <update_modifyDuration_and_buffer+0x9c>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	3364      	adds	r3, #100	; 0x64
 8000162:	4a21      	ldr	r2, [pc, #132]	; (80001e8 <update_modifyDuration_and_buffer+0x9c>)
 8000164:	6013      	str	r3, [r2, #0]

	buffer7SEG[0] = 0;
 8000166:	4b21      	ldr	r3, [pc, #132]	; (80001ec <update_modifyDuration_and_buffer+0xa0>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]
	buffer7SEG[2] = modifyingDuration / 1000;
 800016c:	4b1e      	ldr	r3, [pc, #120]	; (80001e8 <update_modifyDuration_and_buffer+0x9c>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	4a1f      	ldr	r2, [pc, #124]	; (80001f0 <update_modifyDuration_and_buffer+0xa4>)
 8000172:	fb82 1203 	smull	r1, r2, r2, r3
 8000176:	1192      	asrs	r2, r2, #6
 8000178:	17db      	asrs	r3, r3, #31
 800017a:	1ad3      	subs	r3, r2, r3
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b1b      	ldr	r3, [pc, #108]	; (80001ec <update_modifyDuration_and_buffer+0xa0>)
 8000180:	709a      	strb	r2, [r3, #2]
	buffer7SEG[3] = (modifyingDuration / 100) % 10;
 8000182:	4b19      	ldr	r3, [pc, #100]	; (80001e8 <update_modifyDuration_and_buffer+0x9c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a1b      	ldr	r2, [pc, #108]	; (80001f4 <update_modifyDuration_and_buffer+0xa8>)
 8000188:	fb82 1203 	smull	r1, r2, r2, r3
 800018c:	1152      	asrs	r2, r2, #5
 800018e:	17db      	asrs	r3, r3, #31
 8000190:	1ad2      	subs	r2, r2, r3
 8000192:	4b19      	ldr	r3, [pc, #100]	; (80001f8 <update_modifyDuration_and_buffer+0xac>)
 8000194:	fb83 1302 	smull	r1, r3, r3, r2
 8000198:	1099      	asrs	r1, r3, #2
 800019a:	17d3      	asrs	r3, r2, #31
 800019c:	1ac9      	subs	r1, r1, r3
 800019e:	460b      	mov	r3, r1
 80001a0:	009b      	lsls	r3, r3, #2
 80001a2:	440b      	add	r3, r1
 80001a4:	005b      	lsls	r3, r3, #1
 80001a6:	1ad1      	subs	r1, r2, r3
 80001a8:	b2ca      	uxtb	r2, r1
 80001aa:	4b10      	ldr	r3, [pc, #64]	; (80001ec <update_modifyDuration_and_buffer+0xa0>)
 80001ac:	70da      	strb	r2, [r3, #3]

	switch (mode){
 80001ae:	4b13      	ldr	r3, [pc, #76]	; (80001fc <update_modifyDuration_and_buffer+0xb0>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	2b04      	cmp	r3, #4
 80001b4:	d00e      	beq.n	80001d4 <update_modifyDuration_and_buffer+0x88>
 80001b6:	2b04      	cmp	r3, #4
 80001b8:	dc12      	bgt.n	80001e0 <update_modifyDuration_and_buffer+0x94>
 80001ba:	2b02      	cmp	r3, #2
 80001bc:	d002      	beq.n	80001c4 <update_modifyDuration_and_buffer+0x78>
 80001be:	2b03      	cmp	r3, #3
 80001c0:	d004      	beq.n	80001cc <update_modifyDuration_and_buffer+0x80>
		case GREEN:
			buffer7SEG[1] = 4;
			break;

		default:
			break;
 80001c2:	e00d      	b.n	80001e0 <update_modifyDuration_and_buffer+0x94>
			buffer7SEG[1] = 2;
 80001c4:	4b09      	ldr	r3, [pc, #36]	; (80001ec <update_modifyDuration_and_buffer+0xa0>)
 80001c6:	2202      	movs	r2, #2
 80001c8:	705a      	strb	r2, [r3, #1]
			break;
 80001ca:	e00a      	b.n	80001e2 <update_modifyDuration_and_buffer+0x96>
			buffer7SEG[1] = 3;
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <update_modifyDuration_and_buffer+0xa0>)
 80001ce:	2203      	movs	r2, #3
 80001d0:	705a      	strb	r2, [r3, #1]
			break;
 80001d2:	e006      	b.n	80001e2 <update_modifyDuration_and_buffer+0x96>
			buffer7SEG[1] = 4;
 80001d4:	4b05      	ldr	r3, [pc, #20]	; (80001ec <update_modifyDuration_and_buffer+0xa0>)
 80001d6:	2204      	movs	r2, #4
 80001d8:	705a      	strb	r2, [r3, #1]
			break;
 80001da:	e002      	b.n	80001e2 <update_modifyDuration_and_buffer+0x96>
		}
	}
 80001dc:	bf00      	nop
 80001de:	e000      	b.n	80001e2 <update_modifyDuration_and_buffer+0x96>
			break;
 80001e0:	bf00      	nop
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000054 	.word	0x20000054
 80001ec:	20000058 	.word	0x20000058
 80001f0:	10624dd3 	.word	0x10624dd3
 80001f4:	51eb851f 	.word	0x51eb851f
 80001f8:	66666667 	.word	0x66666667
 80001fc:	2000005d 	.word	0x2000005d

08000200 <fsm_manual_traffic_light>:

void fsm_manual_traffic_light(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	switch (mode){
 8000204:	4b5a      	ldr	r3, [pc, #360]	; (8000370 <fsm_manual_traffic_light+0x170>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b04      	cmp	r3, #4
 800020a:	d07d      	beq.n	8000308 <fsm_manual_traffic_light+0x108>
 800020c:	2b04      	cmp	r3, #4
 800020e:	f300 80a5 	bgt.w	800035c <fsm_manual_traffic_light+0x15c>
 8000212:	2b02      	cmp	r3, #2
 8000214:	d002      	beq.n	800021c <fsm_manual_traffic_light+0x1c>
 8000216:	2b03      	cmp	r3, #3
 8000218:	d03b      	beq.n	8000292 <fsm_manual_traffic_light+0x92>
			}

			break;

		default:
			break;
 800021a:	e09f      	b.n	800035c <fsm_manual_traffic_light+0x15c>
			blinking_trafficLight(RED);
 800021c:	2002      	movs	r0, #2
 800021e:	f000 fd1d 	bl	8000c5c <blinking_trafficLight>
			if (isButtonPressed(BUTTON_MODE)){		// press button mode
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f956 	bl	80004d4 <isButtonPressed>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d013      	beq.n	8000256 <fsm_manual_traffic_light+0x56>
				mode = YELLOW;
 800022e:	4b50      	ldr	r3, [pc, #320]	; (8000370 <fsm_manual_traffic_light+0x170>)
 8000230:	2203      	movs	r2, #3
 8000232:	701a      	strb	r2, [r3, #0]
				modifyingDuration = 0;
 8000234:	4b4f      	ldr	r3, [pc, #316]	; (8000374 <fsm_manual_traffic_light+0x174>)
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
				buffer7SEG[0] = 0;
 800023a:	4b4f      	ldr	r3, [pc, #316]	; (8000378 <fsm_manual_traffic_light+0x178>)
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
				buffer7SEG[1] = 3;
 8000240:	4b4d      	ldr	r3, [pc, #308]	; (8000378 <fsm_manual_traffic_light+0x178>)
 8000242:	2203      	movs	r2, #3
 8000244:	705a      	strb	r2, [r3, #1]
				buffer7SEG[2] = 0;
 8000246:	4b4c      	ldr	r3, [pc, #304]	; (8000378 <fsm_manual_traffic_light+0x178>)
 8000248:	2200      	movs	r2, #0
 800024a:	709a      	strb	r2, [r3, #2]
				buffer7SEG[3] = 0;
 800024c:	4b4a      	ldr	r3, [pc, #296]	; (8000378 <fsm_manual_traffic_light+0x178>)
 800024e:	2200      	movs	r2, #0
 8000250:	70da      	strb	r2, [r3, #3]
				clear_trafficLight();
 8000252:	f000 fdf1 	bl	8000e38 <clear_trafficLight>
			update_modifyDuration_and_buffer();
 8000256:	f7ff ff79 	bl	800014c <update_modifyDuration_and_buffer>
			if (isButtonPressed(BUTTON_SET)){
 800025a:	2002      	movs	r0, #2
 800025c:	f000 f93a 	bl	80004d4 <isButtonPressed>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d07c      	beq.n	8000360 <fsm_manual_traffic_light+0x160>
				redDuration = modifyingDuration;
 8000266:	4b43      	ldr	r3, [pc, #268]	; (8000374 <fsm_manual_traffic_light+0x174>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a44      	ldr	r2, [pc, #272]	; (800037c <fsm_manual_traffic_light+0x17c>)
 800026c:	6013      	str	r3, [r2, #0]
				modifyingDuration = 0;
 800026e:	4b41      	ldr	r3, [pc, #260]	; (8000374 <fsm_manual_traffic_light+0x174>)
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
				buffer7SEG[1] = 3;
 8000274:	4b40      	ldr	r3, [pc, #256]	; (8000378 <fsm_manual_traffic_light+0x178>)
 8000276:	2203      	movs	r2, #3
 8000278:	705a      	strb	r2, [r3, #1]
				buffer7SEG[2] = 0;
 800027a:	4b3f      	ldr	r3, [pc, #252]	; (8000378 <fsm_manual_traffic_light+0x178>)
 800027c:	2200      	movs	r2, #0
 800027e:	709a      	strb	r2, [r3, #2]
				buffer7SEG[3] = 0;
 8000280:	4b3d      	ldr	r3, [pc, #244]	; (8000378 <fsm_manual_traffic_light+0x178>)
 8000282:	2200      	movs	r2, #0
 8000284:	70da      	strb	r2, [r3, #3]
				clear_trafficLight();
 8000286:	f000 fdd7 	bl	8000e38 <clear_trafficLight>
				mode = YELLOW;
 800028a:	4b39      	ldr	r3, [pc, #228]	; (8000370 <fsm_manual_traffic_light+0x170>)
 800028c:	2203      	movs	r2, #3
 800028e:	701a      	strb	r2, [r3, #0]
			break;
 8000290:	e066      	b.n	8000360 <fsm_manual_traffic_light+0x160>
			blinking_trafficLight(YELLOW);
 8000292:	2003      	movs	r0, #3
 8000294:	f000 fce2 	bl	8000c5c <blinking_trafficLight>
			if (isButtonPressed(BUTTON_MODE)){		// press button mode
 8000298:	2000      	movs	r0, #0
 800029a:	f000 f91b 	bl	80004d4 <isButtonPressed>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d013      	beq.n	80002cc <fsm_manual_traffic_light+0xcc>
				mode = GREEN;
 80002a4:	4b32      	ldr	r3, [pc, #200]	; (8000370 <fsm_manual_traffic_light+0x170>)
 80002a6:	2204      	movs	r2, #4
 80002a8:	701a      	strb	r2, [r3, #0]
				modifyingDuration = 0;
 80002aa:	4b32      	ldr	r3, [pc, #200]	; (8000374 <fsm_manual_traffic_light+0x174>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
				buffer7SEG[0] = 0;
 80002b0:	4b31      	ldr	r3, [pc, #196]	; (8000378 <fsm_manual_traffic_light+0x178>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
				buffer7SEG[1] = 4;
 80002b6:	4b30      	ldr	r3, [pc, #192]	; (8000378 <fsm_manual_traffic_light+0x178>)
 80002b8:	2204      	movs	r2, #4
 80002ba:	705a      	strb	r2, [r3, #1]
				buffer7SEG[2] = 0;
 80002bc:	4b2e      	ldr	r3, [pc, #184]	; (8000378 <fsm_manual_traffic_light+0x178>)
 80002be:	2200      	movs	r2, #0
 80002c0:	709a      	strb	r2, [r3, #2]
				buffer7SEG[3] = 0;
 80002c2:	4b2d      	ldr	r3, [pc, #180]	; (8000378 <fsm_manual_traffic_light+0x178>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	70da      	strb	r2, [r3, #3]
				clear_trafficLight();
 80002c8:	f000 fdb6 	bl	8000e38 <clear_trafficLight>
			update_modifyDuration_and_buffer();
 80002cc:	f7ff ff3e 	bl	800014c <update_modifyDuration_and_buffer>
			if (isButtonPressed(BUTTON_SET)){
 80002d0:	2002      	movs	r0, #2
 80002d2:	f000 f8ff 	bl	80004d4 <isButtonPressed>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d043      	beq.n	8000364 <fsm_manual_traffic_light+0x164>
				yellowDuration = modifyingDuration;
 80002dc:	4b25      	ldr	r3, [pc, #148]	; (8000374 <fsm_manual_traffic_light+0x174>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a27      	ldr	r2, [pc, #156]	; (8000380 <fsm_manual_traffic_light+0x180>)
 80002e2:	6013      	str	r3, [r2, #0]
				clear_trafficLight();
 80002e4:	f000 fda8 	bl	8000e38 <clear_trafficLight>
				modifyingDuration = 0;
 80002e8:	4b22      	ldr	r3, [pc, #136]	; (8000374 <fsm_manual_traffic_light+0x174>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
				buffer7SEG[1] = 4;
 80002ee:	4b22      	ldr	r3, [pc, #136]	; (8000378 <fsm_manual_traffic_light+0x178>)
 80002f0:	2204      	movs	r2, #4
 80002f2:	705a      	strb	r2, [r3, #1]
				buffer7SEG[2] = 0;
 80002f4:	4b20      	ldr	r3, [pc, #128]	; (8000378 <fsm_manual_traffic_light+0x178>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	709a      	strb	r2, [r3, #2]
				buffer7SEG[3] = 0;
 80002fa:	4b1f      	ldr	r3, [pc, #124]	; (8000378 <fsm_manual_traffic_light+0x178>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	70da      	strb	r2, [r3, #3]
				mode = GREEN;
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <fsm_manual_traffic_light+0x170>)
 8000302:	2204      	movs	r2, #4
 8000304:	701a      	strb	r2, [r3, #0]
			break;
 8000306:	e02d      	b.n	8000364 <fsm_manual_traffic_light+0x164>
			blinking_trafficLight(GREEN);
 8000308:	2004      	movs	r0, #4
 800030a:	f000 fca7 	bl	8000c5c <blinking_trafficLight>
			if (isButtonPressed(BUTTON_MODE)){		// press button mode
 800030e:	2000      	movs	r0, #0
 8000310:	f000 f8e0 	bl	80004d4 <isButtonPressed>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d008      	beq.n	800032c <fsm_manual_traffic_light+0x12c>
				trf_flag[0] = RED;
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <fsm_manual_traffic_light+0x184>)
 800031c:	2202      	movs	r2, #2
 800031e:	701a      	strb	r2, [r3, #0]
				trf_flag[1] = GREEN;
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <fsm_manual_traffic_light+0x184>)
 8000322:	2204      	movs	r2, #4
 8000324:	705a      	strb	r2, [r3, #1]
				mode = INIT;
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <fsm_manual_traffic_light+0x170>)
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
			update_modifyDuration_and_buffer();
 800032c:	f7ff ff0e 	bl	800014c <update_modifyDuration_and_buffer>
			if (isButtonPressed(BUTTON_SET)){
 8000330:	2002      	movs	r0, #2
 8000332:	f000 f8cf 	bl	80004d4 <isButtonPressed>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d015      	beq.n	8000368 <fsm_manual_traffic_light+0x168>
				greenDuration = modifyingDuration;
 800033c:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <fsm_manual_traffic_light+0x174>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a11      	ldr	r2, [pc, #68]	; (8000388 <fsm_manual_traffic_light+0x188>)
 8000342:	6013      	str	r3, [r2, #0]
				trf_flag[0] = RED;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <fsm_manual_traffic_light+0x184>)
 8000346:	2202      	movs	r2, #2
 8000348:	701a      	strb	r2, [r3, #0]
				trf_flag[1] = GREEN;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <fsm_manual_traffic_light+0x184>)
 800034c:	2204      	movs	r2, #4
 800034e:	705a      	strb	r2, [r3, #1]
				clear_trafficLight();
 8000350:	f000 fd72 	bl	8000e38 <clear_trafficLight>
				mode = AUTORUN;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <fsm_manual_traffic_light+0x170>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
			break;
 800035a:	e005      	b.n	8000368 <fsm_manual_traffic_light+0x168>
			break;
 800035c:	bf00      	nop
 800035e:	e004      	b.n	800036a <fsm_manual_traffic_light+0x16a>
			break;
 8000360:	bf00      	nop
 8000362:	e002      	b.n	800036a <fsm_manual_traffic_light+0x16a>
			break;
 8000364:	bf00      	nop
 8000366:	e000      	b.n	800036a <fsm_manual_traffic_light+0x16a>
			break;
 8000368:	bf00      	nop
	}
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	2000005d 	.word	0x2000005d
 8000374:	20000054 	.word	0x20000054
 8000378:	20000058 	.word	0x20000058
 800037c:	20000004 	.word	0x20000004
 8000380:	20000008 	.word	0x20000008
 8000384:	20000000 	.word	0x20000000
 8000388:	2000000c 	.word	0x2000000c

0800038c <fsm_autorun_traffic_light0>:


void fsm_autorun_traffic_light0(){
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	switch (trf_flag[0]){
 8000390:	4b2c      	ldr	r3, [pc, #176]	; (8000444 <fsm_autorun_traffic_light0+0xb8>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b04      	cmp	r3, #4
 8000396:	d02f      	beq.n	80003f8 <fsm_autorun_traffic_light0+0x6c>
 8000398:	2b04      	cmp	r3, #4
 800039a:	dc49      	bgt.n	8000430 <fsm_autorun_traffic_light0+0xa4>
 800039c:	2b02      	cmp	r3, #2
 800039e:	d002      	beq.n	80003a6 <fsm_autorun_traffic_light0+0x1a>
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d00d      	beq.n	80003c0 <fsm_autorun_traffic_light0+0x34>
				auto_setTimer_trfLight(0);
			}
			break;

		default:
			break;
 80003a4:	e044      	b.n	8000430 <fsm_autorun_traffic_light0+0xa4>
			onlyOn_RED0();
 80003a6:	f000 fcc3 	bl	8000d30 <onlyOn_RED0>
			if (trfLight0_timer_flag == 1){
 80003aa:	4b27      	ldr	r3, [pc, #156]	; (8000448 <fsm_autorun_traffic_light0+0xbc>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d140      	bne.n	8000434 <fsm_autorun_traffic_light0+0xa8>
				trf_flag[0] = GREEN;
 80003b2:	4b24      	ldr	r3, [pc, #144]	; (8000444 <fsm_autorun_traffic_light0+0xb8>)
 80003b4:	2204      	movs	r2, #4
 80003b6:	701a      	strb	r2, [r3, #0]
				auto_setTimer_trfLight(0);
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 fdef 	bl	8000f9c <auto_setTimer_trfLight>
			break;
 80003be:	e039      	b.n	8000434 <fsm_autorun_traffic_light0+0xa8>
			onlyOn_YELLOW0();
 80003c0:	f000 fccc 	bl	8000d5c <onlyOn_YELLOW0>
			HAL_GPIO_WritePin(GPIOA, LED_RED0_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2101      	movs	r1, #1
 80003c8:	4820      	ldr	r0, [pc, #128]	; (800044c <fsm_autorun_traffic_light0+0xc0>)
 80003ca:	f001 f9f4 	bl	80017b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW0_Pin, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2102      	movs	r1, #2
 80003d2:	481e      	ldr	r0, [pc, #120]	; (800044c <fsm_autorun_traffic_light0+0xc0>)
 80003d4:	f001 f9ef 	bl	80017b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN0_Pin, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2104      	movs	r1, #4
 80003dc:	481b      	ldr	r0, [pc, #108]	; (800044c <fsm_autorun_traffic_light0+0xc0>)
 80003de:	f001 f9ea 	bl	80017b6 <HAL_GPIO_WritePin>
			if (trfLight0_timer_flag == 1){
 80003e2:	4b19      	ldr	r3, [pc, #100]	; (8000448 <fsm_autorun_traffic_light0+0xbc>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d126      	bne.n	8000438 <fsm_autorun_traffic_light0+0xac>
				trf_flag[0] = RED;
 80003ea:	4b16      	ldr	r3, [pc, #88]	; (8000444 <fsm_autorun_traffic_light0+0xb8>)
 80003ec:	2202      	movs	r2, #2
 80003ee:	701a      	strb	r2, [r3, #0]
				auto_setTimer_trfLight(0);
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 fdd3 	bl	8000f9c <auto_setTimer_trfLight>
			break;
 80003f6:	e01f      	b.n	8000438 <fsm_autorun_traffic_light0+0xac>
			onlyOn_GREEN0();
 80003f8:	f000 fcc6 	bl	8000d88 <onlyOn_GREEN0>
			HAL_GPIO_WritePin(GPIOA, LED_RED0_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2101      	movs	r1, #1
 8000400:	4812      	ldr	r0, [pc, #72]	; (800044c <fsm_autorun_traffic_light0+0xc0>)
 8000402:	f001 f9d8 	bl	80017b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW0_Pin, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2102      	movs	r1, #2
 800040a:	4810      	ldr	r0, [pc, #64]	; (800044c <fsm_autorun_traffic_light0+0xc0>)
 800040c:	f001 f9d3 	bl	80017b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN0_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2104      	movs	r1, #4
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <fsm_autorun_traffic_light0+0xc0>)
 8000416:	f001 f9ce 	bl	80017b6 <HAL_GPIO_WritePin>
			if (trfLight0_timer_flag == 1){
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <fsm_autorun_traffic_light0+0xbc>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d10c      	bne.n	800043c <fsm_autorun_traffic_light0+0xb0>
				trf_flag[0] = YELLOW;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <fsm_autorun_traffic_light0+0xb8>)
 8000424:	2203      	movs	r2, #3
 8000426:	701a      	strb	r2, [r3, #0]
				auto_setTimer_trfLight(0);
 8000428:	2000      	movs	r0, #0
 800042a:	f000 fdb7 	bl	8000f9c <auto_setTimer_trfLight>
			break;
 800042e:	e005      	b.n	800043c <fsm_autorun_traffic_light0+0xb0>
			break;
 8000430:	bf00      	nop
 8000432:	e004      	b.n	800043e <fsm_autorun_traffic_light0+0xb2>
			break;
 8000434:	bf00      	nop
 8000436:	e002      	b.n	800043e <fsm_autorun_traffic_light0+0xb2>
			break;
 8000438:	bf00      	nop
 800043a:	e000      	b.n	800043e <fsm_autorun_traffic_light0+0xb2>
			break;
 800043c:	bf00      	nop

	}
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000000 	.word	0x20000000
 8000448:	20000070 	.word	0x20000070
 800044c:	40010800 	.word	0x40010800

08000450 <fsm_autorun_traffic_light1>:

void fsm_autorun_traffic_light1(){
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	switch (trf_flag[1]){
 8000454:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <fsm_autorun_traffic_light1+0x7c>)
 8000456:	785b      	ldrb	r3, [r3, #1]
 8000458:	2b04      	cmp	r3, #4
 800045a:	d020      	beq.n	800049e <fsm_autorun_traffic_light1+0x4e>
 800045c:	2b04      	cmp	r3, #4
 800045e:	dc2b      	bgt.n	80004b8 <fsm_autorun_traffic_light1+0x68>
 8000460:	2b02      	cmp	r3, #2
 8000462:	d002      	beq.n	800046a <fsm_autorun_traffic_light1+0x1a>
 8000464:	2b03      	cmp	r3, #3
 8000466:	d00d      	beq.n	8000484 <fsm_autorun_traffic_light1+0x34>
				auto_setTimer_trfLight(1);
			}
			break;

		default:
			break;
 8000468:	e026      	b.n	80004b8 <fsm_autorun_traffic_light1+0x68>
			onlyOn_RED1();
 800046a:	f000 fca3 	bl	8000db4 <onlyOn_RED1>
			if (trfLight1_timer_flag == 1){
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <fsm_autorun_traffic_light1+0x80>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d122      	bne.n	80004bc <fsm_autorun_traffic_light1+0x6c>
				trf_flag[1] = GREEN;
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <fsm_autorun_traffic_light1+0x7c>)
 8000478:	2204      	movs	r2, #4
 800047a:	705a      	strb	r2, [r3, #1]
				auto_setTimer_trfLight(1);
 800047c:	2001      	movs	r0, #1
 800047e:	f000 fd8d 	bl	8000f9c <auto_setTimer_trfLight>
			break;
 8000482:	e01b      	b.n	80004bc <fsm_autorun_traffic_light1+0x6c>
			onlyOn_YELLOW1();
 8000484:	f000 fcac 	bl	8000de0 <onlyOn_YELLOW1>
			if (trfLight1_timer_flag == 1){
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <fsm_autorun_traffic_light1+0x80>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d117      	bne.n	80004c0 <fsm_autorun_traffic_light1+0x70>
				trf_flag[1] = RED;
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <fsm_autorun_traffic_light1+0x7c>)
 8000492:	2202      	movs	r2, #2
 8000494:	705a      	strb	r2, [r3, #1]
				auto_setTimer_trfLight(1);
 8000496:	2001      	movs	r0, #1
 8000498:	f000 fd80 	bl	8000f9c <auto_setTimer_trfLight>
			break;
 800049c:	e010      	b.n	80004c0 <fsm_autorun_traffic_light1+0x70>
			onlyOn_GREEN1();
 800049e:	f000 fcb5 	bl	8000e0c <onlyOn_GREEN1>
			if (trfLight1_timer_flag == 1){
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <fsm_autorun_traffic_light1+0x80>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d10c      	bne.n	80004c4 <fsm_autorun_traffic_light1+0x74>
				trf_flag[1] = YELLOW;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <fsm_autorun_traffic_light1+0x7c>)
 80004ac:	2203      	movs	r2, #3
 80004ae:	705a      	strb	r2, [r3, #1]
				auto_setTimer_trfLight(1);
 80004b0:	2001      	movs	r0, #1
 80004b2:	f000 fd73 	bl	8000f9c <auto_setTimer_trfLight>
			break;
 80004b6:	e005      	b.n	80004c4 <fsm_autorun_traffic_light1+0x74>
			break;
 80004b8:	bf00      	nop
 80004ba:	e004      	b.n	80004c6 <fsm_autorun_traffic_light1+0x76>
			break;
 80004bc:	bf00      	nop
 80004be:	e002      	b.n	80004c6 <fsm_autorun_traffic_light1+0x76>
			break;
 80004c0:	bf00      	nop
 80004c2:	e000      	b.n	80004c6 <fsm_autorun_traffic_light1+0x76>
			break;
 80004c4:	bf00      	nop

	}
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000000 	.word	0x20000000
 80004d0:	20000071 	.word	0x20000071

080004d4 <isButtonPressed>:
static GPIO_PinState getButton[BUTTON_NUM] = 		{RELEASE_STATE, RELEASE_STATE, RELEASE_STATE};
static GPIO_PinState getPrevButton[BUTTON_NUM] = 	{RELEASE_STATE, RELEASE_STATE, RELEASE_STATE};
static GPIO_PinState Press_flag[BUTTON_NUM] = 		{RELEASE_STATE, RELEASE_STATE, RELEASE_STATE};
static uint16_t timerPress[BUTTON_NUM] = 			{200, 100, 200};

uint8_t isButtonPressed(uint8_t index){				// is the button (MODE/MODIFY/SET) pressed and held
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	if (Press_flag[index] == PRESS_STATE){
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <isButtonPressed+0x2c>)
 80004e2:	5cd3      	ldrb	r3, [r2, r3]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d105      	bne.n	80004f4 <isButtonPressed+0x20>
		Press_flag[index] = RELEASE_STATE;
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	4a05      	ldr	r2, [pc, #20]	; (8000500 <isButtonPressed+0x2c>)
 80004ec:	2101      	movs	r1, #1
 80004ee:	54d1      	strb	r1, [r2, r3]
		return 1;
 80004f0:	2301      	movs	r3, #1
 80004f2:	e000      	b.n	80004f6 <isButtonPressed+0x22>
	}
	return 0;
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	20000020 	.word	0x20000020

08000504 <button_reading>:

void button_reading(){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
	for (int index = 0; index < BUTTON_NUM; index++){
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	e08d      	b.n	800062c <button_reading+0x128>
		debounce0[index] = debounce1[index];
 8000510:	4a4b      	ldr	r2, [pc, #300]	; (8000640 <button_reading+0x13c>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	7819      	ldrb	r1, [r3, #0]
 8000518:	4a4a      	ldr	r2, [pc, #296]	; (8000644 <button_reading+0x140>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4413      	add	r3, r2
 800051e:	460a      	mov	r2, r1
 8000520:	701a      	strb	r2, [r3, #0]
		debounce1[index] = getButton[index];
 8000522:	4a49      	ldr	r2, [pc, #292]	; (8000648 <button_reading+0x144>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4413      	add	r3, r2
 8000528:	7819      	ldrb	r1, [r3, #0]
 800052a:	4a45      	ldr	r2, [pc, #276]	; (8000640 <button_reading+0x13c>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4413      	add	r3, r2
 8000530:	460a      	mov	r2, r1
 8000532:	701a      	strb	r2, [r3, #0]

		// latest key gotten from button
		if (index == BUTTON_MODE) getButton[index] = HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE_Pin);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d10c      	bne.n	8000554 <button_reading+0x50>
 800053a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800053e:	4843      	ldr	r0, [pc, #268]	; (800064c <button_reading+0x148>)
 8000540:	f001 f922 	bl	8001788 <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	4619      	mov	r1, r3
 8000548:	4a3f      	ldr	r2, [pc, #252]	; (8000648 <button_reading+0x144>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	460a      	mov	r2, r1
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	e01b      	b.n	800058c <button_reading+0x88>
		else if (index == BUTTON_MODIFY) getButton[index] = HAL_GPIO_ReadPin(GPIOA, BUTTON_MODIFY_Pin);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d10c      	bne.n	8000574 <button_reading+0x70>
 800055a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055e:	483b      	ldr	r0, [pc, #236]	; (800064c <button_reading+0x148>)
 8000560:	f001 f912 	bl	8001788 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	4619      	mov	r1, r3
 8000568:	4a37      	ldr	r2, [pc, #220]	; (8000648 <button_reading+0x144>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	460a      	mov	r2, r1
 8000570:	701a      	strb	r2, [r3, #0]
 8000572:	e00b      	b.n	800058c <button_reading+0x88>
		else getButton[index] = HAL_GPIO_ReadPin(GPIOA, BUTTON_SET_Pin);
 8000574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000578:	4834      	ldr	r0, [pc, #208]	; (800064c <button_reading+0x148>)
 800057a:	f001 f905 	bl	8001788 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	4619      	mov	r1, r3
 8000582:	4a31      	ldr	r2, [pc, #196]	; (8000648 <button_reading+0x144>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	460a      	mov	r2, r1
 800058a:	701a      	strb	r2, [r3, #0]

		if (debounce0[index] == debounce1[index] && debounce1[index] == getButton[index]){
 800058c:	4a2d      	ldr	r2, [pc, #180]	; (8000644 <button_reading+0x140>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	492a      	ldr	r1, [pc, #168]	; (8000640 <button_reading+0x13c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	440b      	add	r3, r1
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	429a      	cmp	r2, r3
 800059e:	d142      	bne.n	8000626 <button_reading+0x122>
 80005a0:	4a27      	ldr	r2, [pc, #156]	; (8000640 <button_reading+0x13c>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	781a      	ldrb	r2, [r3, #0]
 80005a8:	4927      	ldr	r1, [pc, #156]	; (8000648 <button_reading+0x144>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	440b      	add	r3, r1
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d138      	bne.n	8000626 <button_reading+0x122>
			if (getPrevButton[index] != getButton[index]){			// press and release
 80005b4:	4a26      	ldr	r2, [pc, #152]	; (8000650 <button_reading+0x14c>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	781a      	ldrb	r2, [r3, #0]
 80005bc:	4922      	ldr	r1, [pc, #136]	; (8000648 <button_reading+0x144>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	440b      	add	r3, r1
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d019      	beq.n	80005fc <button_reading+0xf8>
				getPrevButton[index] = getButton[index];
 80005c8:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <button_reading+0x144>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	7819      	ldrb	r1, [r3, #0]
 80005d0:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <button_reading+0x14c>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	460a      	mov	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]

				if (getButton[index] == PRESS_STATE){
 80005da:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <button_reading+0x144>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d11f      	bne.n	8000626 <button_reading+0x122>
					// TO DO
					timerPress[index] = 200;
 80005e6:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <button_reading+0x150>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	21c8      	movs	r1, #200	; 0xc8
 80005ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					Press_flag[index] = PRESS_STATE;
 80005f0:	4a19      	ldr	r2, [pc, #100]	; (8000658 <button_reading+0x154>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	e014      	b.n	8000626 <button_reading+0x122>
				}
			}

			else{																// press and hold
				timerPress[index]--;
 80005fc:	4a15      	ldr	r2, [pc, #84]	; (8000654 <button_reading+0x150>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000604:	3b01      	subs	r3, #1
 8000606:	b299      	uxth	r1, r3
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <button_reading+0x150>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if (timerPress[index] == 0){
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <button_reading+0x150>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d104      	bne.n	8000626 <button_reading+0x122>
					getPrevButton[index] = RELEASE_STATE;
 800061c:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <button_reading+0x14c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
	for (int index = 0; index < BUTTON_NUM; index++){
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3301      	adds	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b02      	cmp	r3, #2
 8000630:	f77f af6e 	ble.w	8000510 <button_reading+0xc>
				}
			}
		}
	}
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000014 	.word	0x20000014
 8000644:	20000010 	.word	0x20000010
 8000648:	20000018 	.word	0x20000018
 800064c:	40010800 	.word	0x40010800
 8000650:	2000001c 	.word	0x2000001c
 8000654:	20000024 	.word	0x20000024
 8000658:	20000020 	.word	0x20000020

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fda8 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f888 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 f90e 	bl	8000888 <MX_GPIO_Init>
  MX_TIM2_Init();
 800066c:	f000 f8c0 	bl	80007f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000670:	4837      	ldr	r0, [pc, #220]	; (8000750 <main+0xf4>)
 8000672:	f001 fd09 	bl	8002088 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer_changing_LED_on(25);
 8000676:	2019      	movs	r0, #25
 8000678:	f000 fc12 	bl	8000ea0 <setTimer_changing_LED_on>

  blinking_prescaler = htim2.Init.Prescaler;
 800067c:	4b34      	ldr	r3, [pc, #208]	; (8000750 <main+0xf4>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	461a      	mov	r2, r3
 8000682:	4b34      	ldr	r3, [pc, #208]	; (8000754 <main+0xf8>)
 8000684:	601a      	str	r2, [r3, #0]
  blinking_period = htim2.Init.Period;
 8000686:	4b32      	ldr	r3, [pc, #200]	; (8000750 <main+0xf4>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	461a      	mov	r2, r3
 800068c:	4b32      	ldr	r3, [pc, #200]	; (8000758 <main+0xfc>)
 800068e:	601a      	str	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */
	  if (mode == INIT){							// trạng thái khởi tạo
 8000690:	4b32      	ldr	r3, [pc, #200]	; (800075c <main+0x100>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10e      	bne.n	80006b6 <main+0x5a>
		  HAL_GPIO_WritePin(GPIOA, LED_MODE0_Pin | LED_MODE1_Pin | LED_MODIFY0_Pin | LED_MODIFY1_Pin |
 8000698:	2201      	movs	r2, #1
 800069a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800069e:	4830      	ldr	r0, [pc, #192]	; (8000760 <main+0x104>)
 80006a0:	f001 f889 	bl	80017b6 <HAL_GPIO_WritePin>
				  	  	  	  	  	  LED_RED0_Pin | LED_YELLOW0_Pin | LED_GREEN0_Pin |
									  	  LED_RED1_Pin | LED_YELLOW1_Pin | LED_GREEN1_Pin, GPIO_PIN_SET);	// tắt hết LED

		  mode = AUTORUN;							// tại trạng thái khởi tạo, chuyển qua mode1 liền
 80006a4:	4b2d      	ldr	r3, [pc, #180]	; (800075c <main+0x100>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
		  auto_setTimer_trfLight(0);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 fc76 	bl	8000f9c <auto_setTimer_trfLight>
		  auto_setTimer_trfLight(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 fc73 	bl	8000f9c <auto_setTimer_trfLight>

	  }


	  if (mode == AUTORUN){							// mode1: hoạt động bth
 80006b6:	4b29      	ldr	r3, [pc, #164]	; (800075c <main+0x100>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d12d      	bne.n	800071a <main+0xbe>
		  fsm_autorun_traffic_light0();
 80006be:	f7ff fe65 	bl	800038c <fsm_autorun_traffic_light0>
		  fsm_autorun_traffic_light1();
 80006c2:	f7ff fec5 	bl	8000450 <fsm_autorun_traffic_light1>

		  autorun_update_buffer7SEG(); // cập nhật buffer led 7 đoạn chế độ đếm ngược bth
 80006c6:	f000 f9e7 	bl	8000a98 <autorun_update_buffer7SEG>

		  if (isButtonPressed(BUTTON_MODE) == 1){
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff ff02 	bl	80004d4 <isButtonPressed>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d121      	bne.n	800071a <main+0xbe>
			  setTimerBlinking( (4 * 1000000) / ((blinking_prescaler+1) * (blinking_period+1)) );
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <main+0xf8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <main+0xfc>)
 80006de:	6812      	ldr	r2, [r2, #0]
 80006e0:	3201      	adds	r2, #1
 80006e2:	fb02 f303 	mul.w	r3, r2, r3
 80006e6:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <main+0x108>)
 80006e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fbeb 	bl	8000ec8 <setTimerBlinking>
			  mode = RED;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <main+0x100>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	701a      	strb	r2, [r3, #0]
			  modifyingDuration = 0;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <main+0x10c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
			  buffer7SEG[0] = 0;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <main+0x110>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
			  buffer7SEG[1] = 2;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <main+0x110>)
 8000706:	2202      	movs	r2, #2
 8000708:	705a      	strb	r2, [r3, #1]
			  buffer7SEG[2] = 0;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <main+0x110>)
 800070c:	2200      	movs	r2, #0
 800070e:	709a      	strb	r2, [r3, #2]
			  buffer7SEG[3] = 0;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <main+0x110>)
 8000712:	2200      	movs	r2, #0
 8000714:	70da      	strb	r2, [r3, #3]
			  clear_trafficLight();
 8000716:	f000 fb8f 	bl	8000e38 <clear_trafficLight>
		  }
	  }

	  fsm_manual_traffic_light();					// các chế độ điều chỉnh đèn, trong từng trạng thái đều có cập nhật buffer led 7 đoạn nếu cần
 800071a:	f7ff fd71 	bl	8000200 <fsm_manual_traffic_light>


	  if (changeLED_timer_flag == 1){				// cập nhật LED 7 đoạn được sáng, đồng thời biểu diễn LED 7 đoạn đó theo buffer
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <main+0x114>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d1b4      	bne.n	8000690 <main+0x34>
		  changing_LED_on(ledOn++);
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <main+0x118>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	b2d1      	uxtb	r1, r2
 800072e:	4a11      	ldr	r2, [pc, #68]	; (8000774 <main+0x118>)
 8000730:	7011      	strb	r1, [r2, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fa38 	bl	8000ba8 <changing_LED_on>
	  	  if (ledOn >= 4) ledOn = 0;
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <main+0x118>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d902      	bls.n	8000746 <main+0xea>
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <main+0x118>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]

		  setTimer_changing_LED_on(25);
 8000746:	2019      	movs	r0, #25
 8000748:	f000 fbaa 	bl	8000ea0 <setTimer_changing_LED_on>
	  if (mode == INIT){							// trạng thái khởi tạo
 800074c:	e7a0      	b.n	8000690 <main+0x34>
 800074e:	bf00      	nop
 8000750:	2000007c 	.word	0x2000007c
 8000754:	20000078 	.word	0x20000078
 8000758:	20000074 	.word	0x20000074
 800075c:	2000005d 	.word	0x2000005d
 8000760:	40010800 	.word	0x40010800
 8000764:	003d0900 	.word	0x003d0900
 8000768:	20000054 	.word	0x20000054
 800076c:	20000058 	.word	0x20000058
 8000770:	20000073 	.word	0x20000073
 8000774:	2000005c 	.word	0x2000005c

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b090      	sub	sp, #64	; 0x40
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	2228      	movs	r2, #40	; 0x28
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f002 f836 	bl	80027f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	2310      	movs	r3, #16
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 f832 	bl	8001818 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007ba:	f000 f8d8 	bl	800096e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fa9e 	bl	8001d18 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007e2:	f000 f8c4 	bl	800096e <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3740      	adds	r7, #64	; 0x40
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_TIM2_Init+0x94>)
 800080e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000812:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_TIM2_Init+0x94>)
 8000816:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800081a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_TIM2_Init+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_TIM2_Init+0x94>)
 8000824:	2209      	movs	r2, #9
 8000826:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_TIM2_Init+0x94>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_TIM2_Init+0x94>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000834:	4813      	ldr	r0, [pc, #76]	; (8000884 <MX_TIM2_Init+0x94>)
 8000836:	f001 fbd7 	bl	8001fe8 <HAL_TIM_Base_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000840:	f000 f895 	bl	800096e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_TIM2_Init+0x94>)
 8000852:	f001 fd6d 	bl	8002330 <HAL_TIM_ConfigClockSource>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800085c:	f000 f887 	bl	800096e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_TIM2_Init+0x94>)
 800086e:	f001 ff35 	bl	80026dc <HAL_TIMEx_MasterConfigSynchronization>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000878:	f000 f879 	bl	800096e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000007c 	.word	0x2000007c

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_GPIO_Init+0xb8>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a27      	ldr	r2, [pc, #156]	; (8000940 <MX_GPIO_Init+0xb8>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_GPIO_Init+0xb8>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_GPIO_Init+0xb8>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a21      	ldr	r2, [pc, #132]	; (8000940 <MX_GPIO_Init+0xb8>)
 80008ba:	f043 0308 	orr.w	r3, r3, #8
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_GPIO_Init+0xb8>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0308 	and.w	r3, r3, #8
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED0_Pin|LED_YELLOW0_Pin|LED_GREEN0_Pin|LED_RED1_Pin
 80008cc:	2200      	movs	r2, #0
 80008ce:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80008d2:	481c      	ldr	r0, [pc, #112]	; (8000944 <MX_GPIO_Init+0xbc>)
 80008d4:	f000 ff6f 	bl	80017b6 <HAL_GPIO_WritePin>
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_MODE0_Pin|LED_MODE1_Pin
                          |LED_MODIFY0_Pin|LED_MODIFY1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80008d8:	2200      	movs	r2, #0
 80008da:	217f      	movs	r1, #127	; 0x7f
 80008dc:	481a      	ldr	r0, [pc, #104]	; (8000948 <MX_GPIO_Init+0xc0>)
 80008de:	f000 ff6a 	bl	80017b6 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED0_Pin LED_YELLOW0_Pin LED_GREEN0_Pin LED_RED1_Pin
                           LED_YELLOW1_Pin LED_GREEN1_Pin LED_MODE0_Pin LED_MODE1_Pin
                           LED_MODIFY0_Pin LED_MODIFY1_Pin */
  GPIO_InitStruct.Pin = LED_RED0_Pin|LED_YELLOW0_Pin|LED_GREEN0_Pin|LED_RED1_Pin
 80008e2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80008e6:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_MODE0_Pin|LED_MODE1_Pin
                          |LED_MODIFY0_Pin|LED_MODIFY1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2302      	movs	r3, #2
 80008f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	4619      	mov	r1, r3
 80008fa:	4812      	ldr	r0, [pc, #72]	; (8000944 <MX_GPIO_Init+0xbc>)
 80008fc:	f000 fdca 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000900:	237f      	movs	r3, #127	; 0x7f
 8000902:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2302      	movs	r3, #2
 800090e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	4619      	mov	r1, r3
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_GPIO_Init+0xc0>)
 8000918:	f000 fdbc 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MODE_Pin BUTTON_MODIFY_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin|BUTTON_MODIFY_Pin|BUTTON_SET_Pin;
 800091c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000920:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000926:	2301      	movs	r3, #1
 8000928:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_GPIO_Init+0xbc>)
 8000932:	f000 fdaf 	bl	8001494 <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000
 8000944:	40010800 	.word	0x40010800
 8000948:	40010c00 	.word	0x40010c00

0800094c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)	button_reading () ;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
 800095e:	f7ff fdd1 	bl	8000504 <button_reading>
	timerRun();
 8000962:	f000 fac5 	bl	8000ef0 <timerRun>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000972:	b672      	cpsid	i
}
 8000974:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000976:	e7fe      	b.n	8000976 <Error_Handler+0x8>

08000978 <display7SEG>:
 */

#include "output_display.h"

// phần led 7 đoạn
void display7SEG(uint8_t counter){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	switch (counter){
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b09      	cmp	r3, #9
 8000986:	f200 8080 	bhi.w	8000a8a <display7SEG+0x112>
 800098a:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <display7SEG+0x18>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	080009b9 	.word	0x080009b9
 8000994:	080009cf 	.word	0x080009cf
 8000998:	080009e5 	.word	0x080009e5
 800099c:	080009fb 	.word	0x080009fb
 80009a0:	08000a11 	.word	0x08000a11
 80009a4:	08000a27 	.word	0x08000a27
 80009a8:	08000a3d 	.word	0x08000a3d
 80009ac:	08000a53 	.word	0x08000a53
 80009b0:	08000a69 	.word	0x08000a69
 80009b4:	08000a75 	.word	0x08000a75
		case 0:
			HAL_GPIO_WritePin(GPIOB , SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG3_Pin |
 80009b8:	2200      	movs	r2, #0
 80009ba:	213f      	movs	r1, #63	; 0x3f
 80009bc:	4835      	ldr	r0, [pc, #212]	; (8000a94 <display7SEG+0x11c>)
 80009be:	f000 fefa 	bl	80017b6 <HAL_GPIO_WritePin>
							  SEG4_Pin | SEG5_Pin , GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB , SEG6_Pin , GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2140      	movs	r1, #64	; 0x40
 80009c6:	4833      	ldr	r0, [pc, #204]	; (8000a94 <display7SEG+0x11c>)
 80009c8:	f000 fef5 	bl	80017b6 <HAL_GPIO_WritePin>
			break;
 80009cc:	e05e      	b.n	8000a8c <display7SEG+0x114>

		case 1:
			HAL_GPIO_WritePin(GPIOB , SEG1_Pin | SEG2_Pin , GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2106      	movs	r1, #6
 80009d2:	4830      	ldr	r0, [pc, #192]	; (8000a94 <display7SEG+0x11c>)
 80009d4:	f000 feef 	bl	80017b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB , SEG0_Pin | SEG3_Pin | SEG4_Pin | SEG5_Pin | SEG6_Pin , GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2179      	movs	r1, #121	; 0x79
 80009dc:	482d      	ldr	r0, [pc, #180]	; (8000a94 <display7SEG+0x11c>)
 80009de:	f000 feea 	bl	80017b6 <HAL_GPIO_WritePin>
			break;
 80009e2:	e053      	b.n	8000a8c <display7SEG+0x114>

		case 2:
			HAL_GPIO_WritePin(GPIOB , SEG0_Pin | SEG1_Pin | SEG3_Pin | SEG4_Pin | SEG6_Pin , GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	215b      	movs	r1, #91	; 0x5b
 80009e8:	482a      	ldr	r0, [pc, #168]	; (8000a94 <display7SEG+0x11c>)
 80009ea:	f000 fee4 	bl	80017b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB , SEG2_Pin | SEG5_Pin , GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2124      	movs	r1, #36	; 0x24
 80009f2:	4828      	ldr	r0, [pc, #160]	; (8000a94 <display7SEG+0x11c>)
 80009f4:	f000 fedf 	bl	80017b6 <HAL_GPIO_WritePin>
			break;
 80009f8:	e048      	b.n	8000a8c <display7SEG+0x114>

		case 3:
			HAL_GPIO_WritePin(GPIOB , SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG3_Pin | SEG6_Pin , GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	214f      	movs	r1, #79	; 0x4f
 80009fe:	4825      	ldr	r0, [pc, #148]	; (8000a94 <display7SEG+0x11c>)
 8000a00:	f000 fed9 	bl	80017b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB , SEG4_Pin | SEG5_Pin , GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2130      	movs	r1, #48	; 0x30
 8000a08:	4822      	ldr	r0, [pc, #136]	; (8000a94 <display7SEG+0x11c>)
 8000a0a:	f000 fed4 	bl	80017b6 <HAL_GPIO_WritePin>
			break;
 8000a0e:	e03d      	b.n	8000a8c <display7SEG+0x114>

		case 4:
			HAL_GPIO_WritePin(GPIOB , SEG1_Pin | SEG2_Pin | SEG5_Pin | SEG6_Pin , GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2166      	movs	r1, #102	; 0x66
 8000a14:	481f      	ldr	r0, [pc, #124]	; (8000a94 <display7SEG+0x11c>)
 8000a16:	f000 fece 	bl	80017b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB , SEG0_Pin | SEG3_Pin | SEG4_Pin , GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2119      	movs	r1, #25
 8000a1e:	481d      	ldr	r0, [pc, #116]	; (8000a94 <display7SEG+0x11c>)
 8000a20:	f000 fec9 	bl	80017b6 <HAL_GPIO_WritePin>
			break;
 8000a24:	e032      	b.n	8000a8c <display7SEG+0x114>

		case 5:
			HAL_GPIO_WritePin(GPIOB , SEG0_Pin | SEG2_Pin | SEG3_Pin | SEG5_Pin | SEG6_Pin , GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	216d      	movs	r1, #109	; 0x6d
 8000a2a:	481a      	ldr	r0, [pc, #104]	; (8000a94 <display7SEG+0x11c>)
 8000a2c:	f000 fec3 	bl	80017b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB , SEG1_Pin | SEG4_Pin , GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2112      	movs	r1, #18
 8000a34:	4817      	ldr	r0, [pc, #92]	; (8000a94 <display7SEG+0x11c>)
 8000a36:	f000 febe 	bl	80017b6 <HAL_GPIO_WritePin>
			break;
 8000a3a:	e027      	b.n	8000a8c <display7SEG+0x114>

		case 6:
			HAL_GPIO_WritePin(GPIOB , SEG0_Pin | SEG2_Pin | SEG3_Pin | SEG4_Pin |
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	217d      	movs	r1, #125	; 0x7d
 8000a40:	4814      	ldr	r0, [pc, #80]	; (8000a94 <display7SEG+0x11c>)
 8000a42:	f000 feb8 	bl	80017b6 <HAL_GPIO_WritePin>
							  SEG5_Pin | SEG6_Pin , GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB , SEG1_Pin , GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2102      	movs	r1, #2
 8000a4a:	4812      	ldr	r0, [pc, #72]	; (8000a94 <display7SEG+0x11c>)
 8000a4c:	f000 feb3 	bl	80017b6 <HAL_GPIO_WritePin>
			break;
 8000a50:	e01c      	b.n	8000a8c <display7SEG+0x114>

		case 7:
			HAL_GPIO_WritePin(GPIOB , SEG0_Pin | SEG1_Pin | SEG2_Pin , GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2107      	movs	r1, #7
 8000a56:	480f      	ldr	r0, [pc, #60]	; (8000a94 <display7SEG+0x11c>)
 8000a58:	f000 fead 	bl	80017b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB , SEG3_Pin | SEG4_Pin | SEG5_Pin | SEG6_Pin , GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2178      	movs	r1, #120	; 0x78
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <display7SEG+0x11c>)
 8000a62:	f000 fea8 	bl	80017b6 <HAL_GPIO_WritePin>
			break;
 8000a66:	e011      	b.n	8000a8c <display7SEG+0x114>

		case 8:
			HAL_GPIO_WritePin(GPIOB , SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG3_Pin |
 8000a68:	2200      	movs	r2, #0
 8000a6a:	217f      	movs	r1, #127	; 0x7f
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <display7SEG+0x11c>)
 8000a6e:	f000 fea2 	bl	80017b6 <HAL_GPIO_WritePin>
							  SEG4_Pin | SEG5_Pin | SEG6_Pin , GPIO_PIN_RESET);
			break;
 8000a72:	e00b      	b.n	8000a8c <display7SEG+0x114>

		case 9:
			HAL_GPIO_WritePin(GPIOB , SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG3_Pin |
 8000a74:	2200      	movs	r2, #0
 8000a76:	216f      	movs	r1, #111	; 0x6f
 8000a78:	4806      	ldr	r0, [pc, #24]	; (8000a94 <display7SEG+0x11c>)
 8000a7a:	f000 fe9c 	bl	80017b6 <HAL_GPIO_WritePin>
							  SEG5_Pin | SEG6_Pin , GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB , SEG4_Pin , GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2110      	movs	r1, #16
 8000a82:	4804      	ldr	r0, [pc, #16]	; (8000a94 <display7SEG+0x11c>)
 8000a84:	f000 fe97 	bl	80017b6 <HAL_GPIO_WritePin>
			break;
 8000a88:	e000      	b.n	8000a8c <display7SEG+0x114>

		default:
			break;
 8000a8a:	bf00      	nop
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40010c00 	.word	0x40010c00

08000a98 <autorun_update_buffer7SEG>:

void autorun_update_buffer7SEG(){
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	buffer7SEG[0] = trfLight0_timer_counter / 1000;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <autorun_update_buffer7SEG+0x90>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <autorun_update_buffer7SEG+0x94>)
 8000aa2:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa6:	1192      	asrs	r2, r2, #6
 8000aa8:	17db      	asrs	r3, r3, #31
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <autorun_update_buffer7SEG+0x98>)
 8000ab0:	701a      	strb	r2, [r3, #0]
	buffer7SEG[1] = (trfLight0_timer_counter / 100) % 10;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <autorun_update_buffer7SEG+0x90>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <autorun_update_buffer7SEG+0x9c>)
 8000ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8000abc:	1152      	asrs	r2, r2, #5
 8000abe:	17db      	asrs	r3, r3, #31
 8000ac0:	1ad2      	subs	r2, r2, r3
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <autorun_update_buffer7SEG+0xa0>)
 8000ac4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ac8:	1099      	asrs	r1, r3, #2
 8000aca:	17d3      	asrs	r3, r2, #31
 8000acc:	1ac9      	subs	r1, r1, r3
 8000ace:	460b      	mov	r3, r1
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	1ad1      	subs	r1, r2, r3
 8000ad8:	b2ca      	uxtb	r2, r1
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <autorun_update_buffer7SEG+0x98>)
 8000adc:	705a      	strb	r2, [r3, #1]
	buffer7SEG[2] = trfLight1_timer_counter / 1000;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <autorun_update_buffer7SEG+0xa4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <autorun_update_buffer7SEG+0x94>)
 8000ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae8:	1192      	asrs	r2, r2, #6
 8000aea:	17db      	asrs	r3, r3, #31
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <autorun_update_buffer7SEG+0x98>)
 8000af2:	709a      	strb	r2, [r3, #2]
	buffer7SEG[3] = (trfLight1_timer_counter / 100) % 10;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <autorun_update_buffer7SEG+0xa4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <autorun_update_buffer7SEG+0x9c>)
 8000afa:	fb82 1203 	smull	r1, r2, r2, r3
 8000afe:	1152      	asrs	r2, r2, #5
 8000b00:	17db      	asrs	r3, r3, #31
 8000b02:	1ad2      	subs	r2, r2, r3
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <autorun_update_buffer7SEG+0xa0>)
 8000b06:	fb83 1302 	smull	r1, r3, r3, r2
 8000b0a:	1099      	asrs	r1, r3, #2
 8000b0c:	17d3      	asrs	r3, r2, #31
 8000b0e:	1ac9      	subs	r1, r1, r3
 8000b10:	460b      	mov	r3, r1
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	440b      	add	r3, r1
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	1ad1      	subs	r1, r2, r3
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <autorun_update_buffer7SEG+0x98>)
 8000b1e:	70da      	strb	r2, [r3, #3]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	20000060 	.word	0x20000060
 8000b2c:	10624dd3 	.word	0x10624dd3
 8000b30:	20000058 	.word	0x20000058
 8000b34:	51eb851f 	.word	0x51eb851f
 8000b38:	66666667 	.word	0x66666667
 8000b3c:	20000064 	.word	0x20000064

08000b40 <update7SEG>:

void update7SEG(uint8_t index){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	switch (index){
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d823      	bhi.n	8000b98 <update7SEG+0x58>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <update7SEG+0x18>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000b69 	.word	0x08000b69
 8000b5c:	08000b75 	.word	0x08000b75
 8000b60:	08000b81 	.word	0x08000b81
 8000b64:	08000b8d 	.word	0x08000b8d
		case 0:
			display7SEG(buffer7SEG[0]);
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <update7SEG+0x64>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff03 	bl	8000978 <display7SEG>
			break;
 8000b72:	e012      	b.n	8000b9a <update7SEG+0x5a>

		case 1:
			display7SEG(buffer7SEG[1]);
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <update7SEG+0x64>)
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fefd 	bl	8000978 <display7SEG>
			break;
 8000b7e:	e00c      	b.n	8000b9a <update7SEG+0x5a>

		case 2:
			display7SEG(buffer7SEG[2]);
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <update7SEG+0x64>)
 8000b82:	789b      	ldrb	r3, [r3, #2]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fef7 	bl	8000978 <display7SEG>
			break;
 8000b8a:	e006      	b.n	8000b9a <update7SEG+0x5a>

		case 3:
			display7SEG(buffer7SEG[3]);
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <update7SEG+0x64>)
 8000b8e:	78db      	ldrb	r3, [r3, #3]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fef1 	bl	8000978 <display7SEG>
			break;
 8000b96:	e000      	b.n	8000b9a <update7SEG+0x5a>

		default :
			break;
 8000b98:	bf00      	nop
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000058 	.word	0x20000058

08000ba8 <changing_LED_on>:

void changing_LED_on(uint8_t ledOn){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	switch (ledOn){
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d849      	bhi.n	8000c4c <changing_LED_on+0xa4>
 8000bb8:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <changing_LED_on+0x18>)
 8000bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbe:	bf00      	nop
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000bef 	.word	0x08000bef
 8000bc8:	08000c0d 	.word	0x08000c0d
 8000bcc:	08000c2d 	.word	0x08000c2d
	case 0:
		HAL_GPIO_WritePin(GPIOA , LED_MODE0_Pin , GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	4820      	ldr	r0, [pc, #128]	; (8000c58 <changing_LED_on+0xb0>)
 8000bd6:	f000 fdee 	bl	80017b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA , LED_MODE1_Pin | LED_MODIFY0_Pin | LED_MODIFY1_Pin , GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000be0:	481d      	ldr	r0, [pc, #116]	; (8000c58 <changing_LED_on+0xb0>)
 8000be2:	f000 fde8 	bl	80017b6 <HAL_GPIO_WritePin>
		update7SEG(0);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff ffaa 	bl	8000b40 <update7SEG>
		break;
 8000bec:	e02f      	b.n	8000c4e <changing_LED_on+0xa6>

	case 1:
		HAL_GPIO_WritePin(GPIOA , LED_MODE1_Pin , GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	4819      	ldr	r0, [pc, #100]	; (8000c58 <changing_LED_on+0xb0>)
 8000bf4:	f000 fddf 	bl	80017b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA , LED_MODE0_Pin | LED_MODIFY0_Pin | LED_MODIFY1_Pin , GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000bfe:	4816      	ldr	r0, [pc, #88]	; (8000c58 <changing_LED_on+0xb0>)
 8000c00:	f000 fdd9 	bl	80017b6 <HAL_GPIO_WritePin>
		update7SEG(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff ff9b 	bl	8000b40 <update7SEG>
		break;
 8000c0a:	e020      	b.n	8000c4e <changing_LED_on+0xa6>

	case 2:
		HAL_GPIO_WritePin(GPIOA , LED_MODIFY0_Pin , GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <changing_LED_on+0xb0>)
 8000c14:	f000 fdcf 	bl	80017b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA , LED_MODE0_Pin | LED_MODE1_Pin | LED_MODIFY1_Pin , GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000c1e:	480e      	ldr	r0, [pc, #56]	; (8000c58 <changing_LED_on+0xb0>)
 8000c20:	f000 fdc9 	bl	80017b6 <HAL_GPIO_WritePin>
		update7SEG(2);
 8000c24:	2002      	movs	r0, #2
 8000c26:	f7ff ff8b 	bl	8000b40 <update7SEG>
		break;
 8000c2a:	e010      	b.n	8000c4e <changing_LED_on+0xa6>

	case 3:
		HAL_GPIO_WritePin(GPIOA , LED_MODIFY1_Pin , GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <changing_LED_on+0xb0>)
 8000c34:	f000 fdbf 	bl	80017b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA , LED_MODE0_Pin | LED_MODE1_Pin | LED_MODIFY0_Pin , GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <changing_LED_on+0xb0>)
 8000c40:	f000 fdb9 	bl	80017b6 <HAL_GPIO_WritePin>
		update7SEG(3);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f7ff ff7b 	bl	8000b40 <update7SEG>
		break;
 8000c4a:	e000      	b.n	8000c4e <changing_LED_on+0xa6>

	default:
		break;
 8000c4c:	bf00      	nop
	}
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40010800 	.word	0x40010800

08000c5c <blinking_trafficLight>:

// phần đèn giao thông
void blinking_trafficLight(enum color LED_blinking){				// chớp tắt của đèn đỏ khác hai đèn còn lại => cần sửa
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	switch (LED_blinking){
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d034      	beq.n	8000cd6 <blinking_trafficLight+0x7a>
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	dc49      	bgt.n	8000d04 <blinking_trafficLight+0xa8>
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d002      	beq.n	8000c7a <blinking_trafficLight+0x1e>
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d017      	beq.n	8000ca8 <blinking_trafficLight+0x4c>
			}

			break;

		default:
			break;
 8000c78:	e044      	b.n	8000d04 <blinking_trafficLight+0xa8>
			if (blinking_timer_flag == 1){
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <blinking_trafficLight+0xc0>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d142      	bne.n	8000d08 <blinking_trafficLight+0xac>
				HAL_GPIO_TogglePin(GPIOA, LED_RED0_Pin | LED_RED1_Pin);
 8000c82:	2109      	movs	r1, #9
 8000c84:	4826      	ldr	r0, [pc, #152]	; (8000d20 <blinking_trafficLight+0xc4>)
 8000c86:	f000 fdae 	bl	80017e6 <HAL_GPIO_TogglePin>
				setTimerBlinking((4 * 1000000) / ((blinking_prescaler+1) * (blinking_period+1)));
 8000c8a:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <blinking_trafficLight+0xc8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a25      	ldr	r2, [pc, #148]	; (8000d28 <blinking_trafficLight+0xcc>)
 8000c92:	6812      	ldr	r2, [r2, #0]
 8000c94:	3201      	adds	r2, #1
 8000c96:	fb02 f303 	mul.w	r3, r2, r3
 8000c9a:	4a24      	ldr	r2, [pc, #144]	; (8000d2c <blinking_trafficLight+0xd0>)
 8000c9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f911 	bl	8000ec8 <setTimerBlinking>
			break;
 8000ca6:	e02f      	b.n	8000d08 <blinking_trafficLight+0xac>
			if (blinking_timer_flag == 1){
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <blinking_trafficLight+0xc0>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d12d      	bne.n	8000d0c <blinking_trafficLight+0xb0>
				HAL_GPIO_TogglePin(GPIOA, LED_YELLOW0_Pin | LED_YELLOW1_Pin);
 8000cb0:	2112      	movs	r1, #18
 8000cb2:	481b      	ldr	r0, [pc, #108]	; (8000d20 <blinking_trafficLight+0xc4>)
 8000cb4:	f000 fd97 	bl	80017e6 <HAL_GPIO_TogglePin>
				setTimerBlinking((4 * 1000000) / ((blinking_prescaler+1) * (blinking_period+1)));
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <blinking_trafficLight+0xc8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a1a      	ldr	r2, [pc, #104]	; (8000d28 <blinking_trafficLight+0xcc>)
 8000cc0:	6812      	ldr	r2, [r2, #0]
 8000cc2:	3201      	adds	r2, #1
 8000cc4:	fb02 f303 	mul.w	r3, r2, r3
 8000cc8:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <blinking_trafficLight+0xd0>)
 8000cca:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f8fa 	bl	8000ec8 <setTimerBlinking>
			break;
 8000cd4:	e01a      	b.n	8000d0c <blinking_trafficLight+0xb0>
			if (blinking_timer_flag == 1){
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <blinking_trafficLight+0xc0>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d118      	bne.n	8000d10 <blinking_trafficLight+0xb4>
				HAL_GPIO_TogglePin(GPIOA, LED_GREEN0_Pin | LED_GREEN1_Pin);
 8000cde:	2124      	movs	r1, #36	; 0x24
 8000ce0:	480f      	ldr	r0, [pc, #60]	; (8000d20 <blinking_trafficLight+0xc4>)
 8000ce2:	f000 fd80 	bl	80017e6 <HAL_GPIO_TogglePin>
				setTimerBlinking((4 * 1000000) / ((blinking_prescaler+1) * (blinking_period+1)));
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <blinking_trafficLight+0xc8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <blinking_trafficLight+0xcc>)
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	3201      	adds	r2, #1
 8000cf2:	fb02 f303 	mul.w	r3, r2, r3
 8000cf6:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <blinking_trafficLight+0xd0>)
 8000cf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f8e3 	bl	8000ec8 <setTimerBlinking>
			break;
 8000d02:	e005      	b.n	8000d10 <blinking_trafficLight+0xb4>
			break;
 8000d04:	bf00      	nop
 8000d06:	e004      	b.n	8000d12 <blinking_trafficLight+0xb6>
			break;
 8000d08:	bf00      	nop
 8000d0a:	e002      	b.n	8000d12 <blinking_trafficLight+0xb6>
			break;
 8000d0c:	bf00      	nop
 8000d0e:	e000      	b.n	8000d12 <blinking_trafficLight+0xb6>
			break;
 8000d10:	bf00      	nop
	}
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000072 	.word	0x20000072
 8000d20:	40010800 	.word	0x40010800
 8000d24:	20000078 	.word	0x20000078
 8000d28:	20000074 	.word	0x20000074
 8000d2c:	003d0900 	.word	0x003d0900

08000d30 <onlyOn_RED0>:

void onlyOn_RED0(){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED0_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2101      	movs	r1, #1
 8000d38:	4807      	ldr	r0, [pc, #28]	; (8000d58 <onlyOn_RED0+0x28>)
 8000d3a:	f000 fd3c 	bl	80017b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW0_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2102      	movs	r1, #2
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <onlyOn_RED0+0x28>)
 8000d44:	f000 fd37 	bl	80017b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN0_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <onlyOn_RED0+0x28>)
 8000d4e:	f000 fd32 	bl	80017b6 <HAL_GPIO_WritePin>
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40010800 	.word	0x40010800

08000d5c <onlyOn_YELLOW0>:

void onlyOn_YELLOW0(){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED0_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2101      	movs	r1, #1
 8000d64:	4807      	ldr	r0, [pc, #28]	; (8000d84 <onlyOn_YELLOW0+0x28>)
 8000d66:	f000 fd26 	bl	80017b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW0_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <onlyOn_YELLOW0+0x28>)
 8000d70:	f000 fd21 	bl	80017b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN0_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2104      	movs	r1, #4
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <onlyOn_YELLOW0+0x28>)
 8000d7a:	f000 fd1c 	bl	80017b6 <HAL_GPIO_WritePin>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40010800 	.word	0x40010800

08000d88 <onlyOn_GREEN0>:

void onlyOn_GREEN0(){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED0_Pin, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <onlyOn_GREEN0+0x28>)
 8000d92:	f000 fd10 	bl	80017b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW0_Pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <onlyOn_GREEN0+0x28>)
 8000d9c:	f000 fd0b 	bl	80017b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN0_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2104      	movs	r1, #4
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <onlyOn_GREEN0+0x28>)
 8000da6:	f000 fd06 	bl	80017b6 <HAL_GPIO_WritePin>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40010800 	.word	0x40010800

08000db4 <onlyOn_RED1>:

void onlyOn_RED1(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2108      	movs	r1, #8
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <onlyOn_RED1+0x28>)
 8000dbe:	f000 fcfa 	bl	80017b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <onlyOn_RED1+0x28>)
 8000dc8:	f000 fcf5 	bl	80017b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2120      	movs	r1, #32
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <onlyOn_RED1+0x28>)
 8000dd2:	f000 fcf0 	bl	80017b6 <HAL_GPIO_WritePin>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40010800 	.word	0x40010800

08000de0 <onlyOn_YELLOW1>:

void onlyOn_YELLOW1(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2108      	movs	r1, #8
 8000de8:	4807      	ldr	r0, [pc, #28]	; (8000e08 <onlyOn_YELLOW1+0x28>)
 8000dea:	f000 fce4 	bl	80017b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2110      	movs	r1, #16
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <onlyOn_YELLOW1+0x28>)
 8000df4:	f000 fcdf 	bl	80017b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <onlyOn_YELLOW1+0x28>)
 8000dfe:	f000 fcda 	bl	80017b6 <HAL_GPIO_WritePin>
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40010800 	.word	0x40010800

08000e0c <onlyOn_GREEN1>:

void onlyOn_GREEN1(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2108      	movs	r1, #8
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <onlyOn_GREEN1+0x28>)
 8000e16:	f000 fcce 	bl	80017b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <onlyOn_GREEN1+0x28>)
 8000e20:	f000 fcc9 	bl	80017b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2120      	movs	r1, #32
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <onlyOn_GREEN1+0x28>)
 8000e2a:	f000 fcc4 	bl	80017b6 <HAL_GPIO_WritePin>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40010800 	.word	0x40010800

08000e38 <clear_trafficLight>:

void clear_trafficLight(){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED0_Pin | LED_YELLOW0_Pin | LED_GREEN0_Pin |
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	213f      	movs	r1, #63	; 0x3f
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <clear_trafficLight+0x14>)
 8000e42:	f000 fcb8 	bl	80017b6 <HAL_GPIO_WritePin>
							LED_RED1_Pin | LED_YELLOW1_Pin | LED_GREEN1_Pin, GPIO_PIN_SET);
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40010800 	.word	0x40010800

08000e50 <setTimer_trfLight0>:
uint8_t trfLight0_timer_flag = 0;
uint8_t trfLight1_timer_flag = 0;
uint8_t blinking_timer_flag = 0;
uint8_t changeLED_timer_flag = 0;

void setTimer_trfLight0(int duration){
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	trfLight0_timer_counter = duration;
 8000e58:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <setTimer_trfLight0+0x20>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
	trfLight0_timer_flag = 0;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <setTimer_trfLight0+0x24>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000060 	.word	0x20000060
 8000e74:	20000070 	.word	0x20000070

08000e78 <setTimer_trfLight1>:

void setTimer_trfLight1(int duration){
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	trfLight1_timer_counter = duration;
 8000e80:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <setTimer_trfLight1+0x20>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
	trfLight1_timer_flag = 0;
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <setTimer_trfLight1+0x24>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000064 	.word	0x20000064
 8000e9c:	20000071 	.word	0x20000071

08000ea0 <setTimer_changing_LED_on>:

void setTimer_changing_LED_on(int duration){
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	changeLED_timer_counter = duration;
 8000ea8:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <setTimer_changing_LED_on+0x20>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
	changeLED_timer_flag = 0;
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <setTimer_changing_LED_on+0x24>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000006c 	.word	0x2000006c
 8000ec4:	20000073 	.word	0x20000073

08000ec8 <setTimerBlinking>:

void setTimerBlinking(int duration){
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	blinking_timer_counter = duration;
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <setTimerBlinking+0x20>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
	blinking_timer_flag = 0;
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <setTimerBlinking+0x24>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000068 	.word	0x20000068
 8000eec:	20000072 	.word	0x20000072

08000ef0 <timerRun>:

void timerRun(){
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
	if (trfLight0_timer_counter > 0){
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <timerRun+0x8c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	dd0b      	ble.n	8000f14 <timerRun+0x24>
		trfLight0_timer_counter--;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <timerRun+0x8c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <timerRun+0x8c>)
 8000f04:	6013      	str	r3, [r2, #0]
		if (trfLight0_timer_counter <= 0){
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <timerRun+0x8c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	dc02      	bgt.n	8000f14 <timerRun+0x24>
			trfLight0_timer_flag = 1;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <timerRun+0x90>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (trfLight1_timer_counter > 0){
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <timerRun+0x94>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	dd0b      	ble.n	8000f34 <timerRun+0x44>
		trfLight1_timer_counter--;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <timerRun+0x94>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <timerRun+0x94>)
 8000f24:	6013      	str	r3, [r2, #0]
		if (trfLight1_timer_counter <= 0){
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <timerRun+0x94>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	dc02      	bgt.n	8000f34 <timerRun+0x44>
			trfLight1_timer_flag = 1;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <timerRun+0x98>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (blinking_timer_counter > 0){
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <timerRun+0x9c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dd0b      	ble.n	8000f54 <timerRun+0x64>
		blinking_timer_counter--;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <timerRun+0x9c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <timerRun+0x9c>)
 8000f44:	6013      	str	r3, [r2, #0]
		if (blinking_timer_counter <= 0){
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <timerRun+0x9c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	dc02      	bgt.n	8000f54 <timerRun+0x64>
			blinking_timer_flag = 1;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <timerRun+0xa0>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (changeLED_timer_counter > 0){
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <timerRun+0xa4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dd0b      	ble.n	8000f74 <timerRun+0x84>
		changeLED_timer_counter--;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <timerRun+0xa4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <timerRun+0xa4>)
 8000f64:	6013      	str	r3, [r2, #0]
		if (changeLED_timer_counter <= 0){
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <timerRun+0xa4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	dc02      	bgt.n	8000f74 <timerRun+0x84>
			changeLED_timer_flag = 1;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <timerRun+0xa8>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	20000060 	.word	0x20000060
 8000f80:	20000070 	.word	0x20000070
 8000f84:	20000064 	.word	0x20000064
 8000f88:	20000071 	.word	0x20000071
 8000f8c:	20000068 	.word	0x20000068
 8000f90:	20000072 	.word	0x20000072
 8000f94:	2000006c 	.word	0x2000006c
 8000f98:	20000073 	.word	0x20000073

08000f9c <auto_setTimer_trfLight>:

void auto_setTimer_trfLight(uint8_t index){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	if (index == 0){
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d11c      	bne.n	8000fe6 <auto_setTimer_trfLight+0x4a>
		switch (trf_flag[0]){
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <auto_setTimer_trfLight+0xa0>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d012      	beq.n	8000fda <auto_setTimer_trfLight+0x3e>
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	dc18      	bgt.n	8000fea <auto_setTimer_trfLight+0x4e>
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d002      	beq.n	8000fc2 <auto_setTimer_trfLight+0x26>
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d006      	beq.n	8000fce <auto_setTimer_trfLight+0x32>
		case GREEN:
			setTimer_trfLight0(greenDuration);
			break;

		default:
			break;
 8000fc0:	e013      	b.n	8000fea <auto_setTimer_trfLight+0x4e>
			setTimer_trfLight0(redDuration);
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <auto_setTimer_trfLight+0xa4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff42 	bl	8000e50 <setTimer_trfLight0>
			break;
 8000fcc:	e00e      	b.n	8000fec <auto_setTimer_trfLight+0x50>
			setTimer_trfLight0(yellowDuration);
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <auto_setTimer_trfLight+0xa8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff3c 	bl	8000e50 <setTimer_trfLight0>
			break;
 8000fd8:	e008      	b.n	8000fec <auto_setTimer_trfLight+0x50>
			setTimer_trfLight0(greenDuration);
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <auto_setTimer_trfLight+0xac>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff36 	bl	8000e50 <setTimer_trfLight0>
			break;
 8000fe4:	e002      	b.n	8000fec <auto_setTimer_trfLight+0x50>
		}
	}
 8000fe6:	bf00      	nop
 8000fe8:	e000      	b.n	8000fec <auto_setTimer_trfLight+0x50>
			break;
 8000fea:	bf00      	nop

	if (index == 1){
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d11c      	bne.n	800102c <auto_setTimer_trfLight+0x90>
		switch (trf_flag[1]){
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <auto_setTimer_trfLight+0xa0>)
 8000ff4:	785b      	ldrb	r3, [r3, #1]
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d012      	beq.n	8001020 <auto_setTimer_trfLight+0x84>
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	dc18      	bgt.n	8001030 <auto_setTimer_trfLight+0x94>
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d002      	beq.n	8001008 <auto_setTimer_trfLight+0x6c>
 8001002:	2b03      	cmp	r3, #3
 8001004:	d006      	beq.n	8001014 <auto_setTimer_trfLight+0x78>
		case GREEN:
			setTimer_trfLight1(greenDuration);
			break;

		default:
			break;
 8001006:	e013      	b.n	8001030 <auto_setTimer_trfLight+0x94>
			setTimer_trfLight1(redDuration);
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <auto_setTimer_trfLight+0xa4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff33 	bl	8000e78 <setTimer_trfLight1>
			break;
 8001012:	e00e      	b.n	8001032 <auto_setTimer_trfLight+0x96>
			setTimer_trfLight1(yellowDuration);
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <auto_setTimer_trfLight+0xa8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff2d 	bl	8000e78 <setTimer_trfLight1>
			break;
 800101e:	e008      	b.n	8001032 <auto_setTimer_trfLight+0x96>
			setTimer_trfLight1(greenDuration);
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <auto_setTimer_trfLight+0xac>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff27 	bl	8000e78 <setTimer_trfLight1>
			break;
 800102a:	e002      	b.n	8001032 <auto_setTimer_trfLight+0x96>
		}
	}
 800102c:	bf00      	nop
 800102e:	e000      	b.n	8001032 <auto_setTimer_trfLight+0x96>
			break;
 8001030:	bf00      	nop
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000000 	.word	0x20000000
 8001040:	20000004 	.word	0x20000004
 8001044:	20000008 	.word	0x20000008
 8001048:	2000000c 	.word	0x2000000c

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_MspInit+0x5c>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <HAL_MspInit+0x5c>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6193      	str	r3, [r2, #24]
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_MspInit+0x5c>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_MspInit+0x5c>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_MspInit+0x5c>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <HAL_MspInit+0x5c>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_MspInit+0x60>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_MspInit+0x60>)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000

080010b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c0:	d113      	bne.n	80010ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_TIM_Base_MspInit+0x44>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_TIM_Base_MspInit+0x44>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_TIM_Base_MspInit+0x44>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	201c      	movs	r0, #28
 80010e0:	f000 f9a1 	bl	8001426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010e4:	201c      	movs	r0, #28
 80010e6:	f000 f9ba 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr

0800113a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113e:	f000 f87f 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <TIM2_IRQHandler+0x10>)
 800114e:	f000 ffe7 	bl	8002120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000007c 	.word	0x2000007c

0800115c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001168:	f7ff fff8 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800116e:	490c      	ldr	r1, [pc, #48]	; (80011a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001170:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001184:	4c09      	ldr	r4, [pc, #36]	; (80011ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001192:	f001 fb0d 	bl	80027b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001196:	f7ff fa61 	bl	800065c <main>
  bx lr
 800119a:	4770      	bx	lr
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80011a4:	08002848 	.word	0x08002848
  ldr r2, =_sbss
 80011a8:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80011ac:	200000c8 	.word	0x200000c8

080011b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_2_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_Init+0x28>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a07      	ldr	r2, [pc, #28]	; (80011dc <HAL_Init+0x28>)
 80011be:	f043 0310 	orr.w	r3, r3, #16
 80011c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 f923 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ca:	200f      	movs	r0, #15
 80011cc:	f000 f808 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d0:	f7ff ff3c 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_InitTick+0x54>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x58>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f93b 	bl	800147a <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e00e      	b.n	800122c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d80a      	bhi.n	800122a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f000 f903 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <HAL_InitTick+0x5c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000002c 	.word	0x2000002c
 8001238:	20000034 	.word	0x20000034
 800123c:	20000030 	.word	0x20000030

08001240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_IncTick+0x1c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_IncTick+0x20>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a03      	ldr	r2, [pc, #12]	; (8001260 <HAL_IncTick+0x20>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	20000034 	.word	0x20000034
 8001260:	200000c4 	.word	0x200000c4

08001264 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b02      	ldr	r3, [pc, #8]	; (8001274 <HAL_GetTick+0x10>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	200000c4 	.word	0x200000c4

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4906      	ldr	r1, [pc, #24]	; (8001310 <__NVIC_EnableIRQ+0x34>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f7ff ff90 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff2d 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff42 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff90 	bl	8001368 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5f 	bl	8001314 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff35 	bl	80012dc <__NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ffa2 	bl	80013cc <SysTick_Config>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001494:	b480      	push	{r7}
 8001496:	b08b      	sub	sp, #44	; 0x2c
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a6:	e148      	b.n	800173a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014a8:	2201      	movs	r2, #1
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f040 8137 	bne.w	8001734 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4aa3      	ldr	r2, [pc, #652]	; (8001758 <HAL_GPIO_Init+0x2c4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d05e      	beq.n	800158e <HAL_GPIO_Init+0xfa>
 80014d0:	4aa1      	ldr	r2, [pc, #644]	; (8001758 <HAL_GPIO_Init+0x2c4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d875      	bhi.n	80015c2 <HAL_GPIO_Init+0x12e>
 80014d6:	4aa1      	ldr	r2, [pc, #644]	; (800175c <HAL_GPIO_Init+0x2c8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d058      	beq.n	800158e <HAL_GPIO_Init+0xfa>
 80014dc:	4a9f      	ldr	r2, [pc, #636]	; (800175c <HAL_GPIO_Init+0x2c8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d86f      	bhi.n	80015c2 <HAL_GPIO_Init+0x12e>
 80014e2:	4a9f      	ldr	r2, [pc, #636]	; (8001760 <HAL_GPIO_Init+0x2cc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d052      	beq.n	800158e <HAL_GPIO_Init+0xfa>
 80014e8:	4a9d      	ldr	r2, [pc, #628]	; (8001760 <HAL_GPIO_Init+0x2cc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d869      	bhi.n	80015c2 <HAL_GPIO_Init+0x12e>
 80014ee:	4a9d      	ldr	r2, [pc, #628]	; (8001764 <HAL_GPIO_Init+0x2d0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d04c      	beq.n	800158e <HAL_GPIO_Init+0xfa>
 80014f4:	4a9b      	ldr	r2, [pc, #620]	; (8001764 <HAL_GPIO_Init+0x2d0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d863      	bhi.n	80015c2 <HAL_GPIO_Init+0x12e>
 80014fa:	4a9b      	ldr	r2, [pc, #620]	; (8001768 <HAL_GPIO_Init+0x2d4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d046      	beq.n	800158e <HAL_GPIO_Init+0xfa>
 8001500:	4a99      	ldr	r2, [pc, #612]	; (8001768 <HAL_GPIO_Init+0x2d4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d85d      	bhi.n	80015c2 <HAL_GPIO_Init+0x12e>
 8001506:	2b12      	cmp	r3, #18
 8001508:	d82a      	bhi.n	8001560 <HAL_GPIO_Init+0xcc>
 800150a:	2b12      	cmp	r3, #18
 800150c:	d859      	bhi.n	80015c2 <HAL_GPIO_Init+0x12e>
 800150e:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <HAL_GPIO_Init+0x80>)
 8001510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001514:	0800158f 	.word	0x0800158f
 8001518:	08001569 	.word	0x08001569
 800151c:	0800157b 	.word	0x0800157b
 8001520:	080015bd 	.word	0x080015bd
 8001524:	080015c3 	.word	0x080015c3
 8001528:	080015c3 	.word	0x080015c3
 800152c:	080015c3 	.word	0x080015c3
 8001530:	080015c3 	.word	0x080015c3
 8001534:	080015c3 	.word	0x080015c3
 8001538:	080015c3 	.word	0x080015c3
 800153c:	080015c3 	.word	0x080015c3
 8001540:	080015c3 	.word	0x080015c3
 8001544:	080015c3 	.word	0x080015c3
 8001548:	080015c3 	.word	0x080015c3
 800154c:	080015c3 	.word	0x080015c3
 8001550:	080015c3 	.word	0x080015c3
 8001554:	080015c3 	.word	0x080015c3
 8001558:	08001571 	.word	0x08001571
 800155c:	08001585 	.word	0x08001585
 8001560:	4a82      	ldr	r2, [pc, #520]	; (800176c <HAL_GPIO_Init+0x2d8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001566:	e02c      	b.n	80015c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	623b      	str	r3, [r7, #32]
          break;
 800156e:	e029      	b.n	80015c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	3304      	adds	r3, #4
 8001576:	623b      	str	r3, [r7, #32]
          break;
 8001578:	e024      	b.n	80015c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	3308      	adds	r3, #8
 8001580:	623b      	str	r3, [r7, #32]
          break;
 8001582:	e01f      	b.n	80015c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	330c      	adds	r3, #12
 800158a:	623b      	str	r3, [r7, #32]
          break;
 800158c:	e01a      	b.n	80015c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001596:	2304      	movs	r3, #4
 8001598:	623b      	str	r3, [r7, #32]
          break;
 800159a:	e013      	b.n	80015c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d105      	bne.n	80015b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a4:	2308      	movs	r3, #8
 80015a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	611a      	str	r2, [r3, #16]
          break;
 80015ae:	e009      	b.n	80015c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b0:	2308      	movs	r3, #8
 80015b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	615a      	str	r2, [r3, #20]
          break;
 80015ba:	e003      	b.n	80015c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
          break;
 80015c0:	e000      	b.n	80015c4 <HAL_GPIO_Init+0x130>
          break;
 80015c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2bff      	cmp	r3, #255	; 0xff
 80015c8:	d801      	bhi.n	80015ce <HAL_GPIO_Init+0x13a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	e001      	b.n	80015d2 <HAL_GPIO_Init+0x13e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3304      	adds	r3, #4
 80015d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2bff      	cmp	r3, #255	; 0xff
 80015d8:	d802      	bhi.n	80015e0 <HAL_GPIO_Init+0x14c>
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	e002      	b.n	80015e6 <HAL_GPIO_Init+0x152>
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	3b08      	subs	r3, #8
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	210f      	movs	r1, #15
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	401a      	ands	r2, r3
 80015f8:	6a39      	ldr	r1, [r7, #32]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	431a      	orrs	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8090 	beq.w	8001734 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001614:	4b56      	ldr	r3, [pc, #344]	; (8001770 <HAL_GPIO_Init+0x2dc>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a55      	ldr	r2, [pc, #340]	; (8001770 <HAL_GPIO_Init+0x2dc>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_GPIO_Init+0x2dc>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800162c:	4a51      	ldr	r2, [pc, #324]	; (8001774 <HAL_GPIO_Init+0x2e0>)
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001638:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	220f      	movs	r2, #15
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a49      	ldr	r2, [pc, #292]	; (8001778 <HAL_GPIO_Init+0x2e4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d00d      	beq.n	8001674 <HAL_GPIO_Init+0x1e0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a48      	ldr	r2, [pc, #288]	; (800177c <HAL_GPIO_Init+0x2e8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d007      	beq.n	8001670 <HAL_GPIO_Init+0x1dc>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a47      	ldr	r2, [pc, #284]	; (8001780 <HAL_GPIO_Init+0x2ec>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d101      	bne.n	800166c <HAL_GPIO_Init+0x1d8>
 8001668:	2302      	movs	r3, #2
 800166a:	e004      	b.n	8001676 <HAL_GPIO_Init+0x1e2>
 800166c:	2303      	movs	r3, #3
 800166e:	e002      	b.n	8001676 <HAL_GPIO_Init+0x1e2>
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <HAL_GPIO_Init+0x1e2>
 8001674:	2300      	movs	r3, #0
 8001676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001678:	f002 0203 	and.w	r2, r2, #3
 800167c:	0092      	lsls	r2, r2, #2
 800167e:	4093      	lsls	r3, r2
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001686:	493b      	ldr	r1, [pc, #236]	; (8001774 <HAL_GPIO_Init+0x2e0>)
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	3302      	adds	r3, #2
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016a0:	4b38      	ldr	r3, [pc, #224]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4937      	ldr	r1, [pc, #220]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
 80016ac:	e006      	b.n	80016bc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016ae:	4b35      	ldr	r3, [pc, #212]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4933      	ldr	r1, [pc, #204]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016c8:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	492d      	ldr	r1, [pc, #180]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	43db      	mvns	r3, r3
 80016de:	4929      	ldr	r1, [pc, #164]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	4923      	ldr	r1, [pc, #140]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016fe:	4b21      	ldr	r3, [pc, #132]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	43db      	mvns	r3, r3
 8001706:	491f      	ldr	r1, [pc, #124]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 8001708:	4013      	ands	r3, r2
 800170a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	4919      	ldr	r1, [pc, #100]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	60cb      	str	r3, [r1, #12]
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	43db      	mvns	r3, r3
 800172e:	4915      	ldr	r1, [pc, #84]	; (8001784 <HAL_GPIO_Init+0x2f0>)
 8001730:	4013      	ands	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	3301      	adds	r3, #1
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	f47f aeaf 	bne.w	80014a8 <HAL_GPIO_Init+0x14>
  }
}
 800174a:	bf00      	nop
 800174c:	bf00      	nop
 800174e:	372c      	adds	r7, #44	; 0x2c
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	10320000 	.word	0x10320000
 800175c:	10310000 	.word	0x10310000
 8001760:	10220000 	.word	0x10220000
 8001764:	10210000 	.word	0x10210000
 8001768:	10120000 	.word	0x10120000
 800176c:	10110000 	.word	0x10110000
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000
 8001778:	40010800 	.word	0x40010800
 800177c:	40010c00 	.word	0x40010c00
 8001780:	40011000 	.word	0x40011000
 8001784:	40010400 	.word	0x40010400

08001788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e001      	b.n	80017aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	460b      	mov	r3, r1
 80017c0:	807b      	strh	r3, [r7, #2]
 80017c2:	4613      	mov	r3, r2
 80017c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c6:	787b      	ldrb	r3, [r7, #1]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017cc:	887a      	ldrh	r2, [r7, #2]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017d2:	e003      	b.n	80017dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	041a      	lsls	r2, r3, #16
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	611a      	str	r2, [r3, #16]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	460b      	mov	r3, r1
 80017f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017f8:	887a      	ldrh	r2, [r7, #2]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4013      	ands	r3, r2
 80017fe:	041a      	lsls	r2, r3, #16
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	43d9      	mvns	r1, r3
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	400b      	ands	r3, r1
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	611a      	str	r2, [r3, #16]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e26c      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8087 	beq.w	8001946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001838:	4b92      	ldr	r3, [pc, #584]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b04      	cmp	r3, #4
 8001842:	d00c      	beq.n	800185e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001844:	4b8f      	ldr	r3, [pc, #572]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d112      	bne.n	8001876 <HAL_RCC_OscConfig+0x5e>
 8001850:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d10b      	bne.n	8001876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185e:	4b89      	ldr	r3, [pc, #548]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d06c      	beq.n	8001944 <HAL_RCC_OscConfig+0x12c>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d168      	bne.n	8001944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e246      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x76>
 8001880:	4b80      	ldr	r3, [pc, #512]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a7f      	ldr	r2, [pc, #508]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	e02e      	b.n	80018ec <HAL_RCC_OscConfig+0xd4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x98>
 8001896:	4b7b      	ldr	r3, [pc, #492]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a7a      	ldr	r2, [pc, #488]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800189c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b78      	ldr	r3, [pc, #480]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a77      	ldr	r2, [pc, #476]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e01d      	b.n	80018ec <HAL_RCC_OscConfig+0xd4>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0xbc>
 80018ba:	4b72      	ldr	r3, [pc, #456]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a71      	ldr	r2, [pc, #452]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b6f      	ldr	r3, [pc, #444]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a6e      	ldr	r2, [pc, #440]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e00b      	b.n	80018ec <HAL_RCC_OscConfig+0xd4>
 80018d4:	4b6b      	ldr	r3, [pc, #428]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a6a      	ldr	r2, [pc, #424]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a67      	ldr	r2, [pc, #412]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fcb6 	bl	8001264 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fcb2 	bl	8001264 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1fa      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b5d      	ldr	r3, [pc, #372]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0xe4>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fca2 	bl	8001264 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fc9e 	bl	8001264 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1e6      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x10c>
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d063      	beq.n	8001a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001952:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800195e:	4b49      	ldr	r3, [pc, #292]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b08      	cmp	r3, #8
 8001968:	d11c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x18c>
 800196a:	4b46      	ldr	r3, [pc, #280]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d116      	bne.n	80019a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	4b43      	ldr	r3, [pc, #268]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x176>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e1ba      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4939      	ldr	r1, [pc, #228]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	e03a      	b.n	8001a1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_RCC_OscConfig+0x270>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff fc57 	bl	8001264 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff fc53 	bl	8001264 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e19b      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4927      	ldr	r1, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_RCC_OscConfig+0x270>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fc36 	bl	8001264 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fc:	f7ff fc32 	bl	8001264 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e17a      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d03a      	beq.n	8001a9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d019      	beq.n	8001a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a34:	f7ff fc16 	bl	8001264 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fc12 	bl	8001264 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e15a      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f000 faa6 	bl	8001fac <RCC_Delay>
 8001a60:	e01c      	b.n	8001a9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7ff fbfc 	bl	8001264 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6e:	e00f      	b.n	8001a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff fbf8 	bl	8001264 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d908      	bls.n	8001a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e140      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	42420000 	.word	0x42420000
 8001a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	4b9e      	ldr	r3, [pc, #632]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1e9      	bne.n	8001a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a6 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aae:	4b97      	ldr	r3, [pc, #604]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b94      	ldr	r3, [pc, #592]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a93      	ldr	r2, [pc, #588]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	61d3      	str	r3, [r2, #28]
 8001ac6:	4b91      	ldr	r3, [pc, #580]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b8e      	ldr	r3, [pc, #568]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae2:	4b8b      	ldr	r3, [pc, #556]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a8a      	ldr	r2, [pc, #552]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fbb9 	bl	8001264 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7ff fbb5 	bl	8001264 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	; 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e0fd      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b81      	ldr	r3, [pc, #516]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x312>
 8001b1c:	4b7b      	ldr	r3, [pc, #492]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4a7a      	ldr	r2, [pc, #488]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6213      	str	r3, [r2, #32]
 8001b28:	e02d      	b.n	8001b86 <HAL_RCC_OscConfig+0x36e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x334>
 8001b32:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a75      	ldr	r2, [pc, #468]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6213      	str	r3, [r2, #32]
 8001b3e:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a72      	ldr	r2, [pc, #456]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	6213      	str	r3, [r2, #32]
 8001b4a:	e01c      	b.n	8001b86 <HAL_RCC_OscConfig+0x36e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0x356>
 8001b54:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a6c      	ldr	r2, [pc, #432]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6213      	str	r3, [r2, #32]
 8001b60:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a69      	ldr	r2, [pc, #420]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6213      	str	r3, [r2, #32]
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0x36e>
 8001b6e:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a66      	ldr	r2, [pc, #408]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	4b64      	ldr	r3, [pc, #400]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a63      	ldr	r2, [pc, #396]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d015      	beq.n	8001bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fb69 	bl	8001264 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff fb65 	bl	8001264 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e0ab      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0ee      	beq.n	8001b96 <HAL_RCC_OscConfig+0x37e>
 8001bb8:	e014      	b.n	8001be4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bba:	f7ff fb53 	bl	8001264 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7ff fb4f 	bl	8001264 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e095      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ee      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d105      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bea:	4b48      	ldr	r3, [pc, #288]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a47      	ldr	r2, [pc, #284]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8081 	beq.w	8001d02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c00:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d061      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d146      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c14:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <HAL_RCC_OscConfig+0x4fc>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fb23 	bl	8001264 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c22:	f7ff fb1f 	bl	8001264 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e067      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c34:	4b35      	ldr	r3, [pc, #212]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c48:	d108      	bne.n	8001c5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c4a:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	492d      	ldr	r1, [pc, #180]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a19      	ldr	r1, [r3, #32]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	4927      	ldr	r1, [pc, #156]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_RCC_OscConfig+0x4fc>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff faf3 	bl	8001264 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff faef 	bl	8001264 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e037      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c94:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x46a>
 8001ca0:	e02f      	b.n	8001d02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_RCC_OscConfig+0x4fc>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fadc 	bl	8001264 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7ff fad8 	bl	8001264 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e020      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x498>
 8001cce:	e018      	b.n	8001d02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e013      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40007000 	.word	0x40007000
 8001d14:	42420060 	.word	0x42420060

08001d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0d0      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b6a      	ldr	r3, [pc, #424]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d910      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b67      	ldr	r3, [pc, #412]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0207 	bic.w	r2, r3, #7
 8001d42:	4965      	ldr	r1, [pc, #404]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b63      	ldr	r3, [pc, #396]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0b8      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d74:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a58      	ldr	r2, [pc, #352]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b50      	ldr	r3, [pc, #320]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	494d      	ldr	r1, [pc, #308]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d040      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b47      	ldr	r3, [pc, #284]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d115      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e07f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd6:	4b41      	ldr	r3, [pc, #260]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e073      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de6:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e06b      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001df6:	4b39      	ldr	r3, [pc, #228]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f023 0203 	bic.w	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4936      	ldr	r1, [pc, #216]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e08:	f7ff fa2c 	bl	8001264 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7ff fa28 	bl	8001264 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e053      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 020c 	and.w	r2, r3, #12
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d1eb      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d210      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 0207 	bic.w	r2, r3, #7
 8001e4e:	4922      	ldr	r1, [pc, #136]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e032      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4916      	ldr	r1, [pc, #88]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	490e      	ldr	r1, [pc, #56]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ea6:	f000 f821 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	490a      	ldr	r1, [pc, #40]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb8:	5ccb      	ldrb	r3, [r1, r3]
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f98a 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40022000 	.word	0x40022000
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08002830 	.word	0x08002830
 8001ee4:	2000002c 	.word	0x2000002c
 8001ee8:	20000030 	.word	0x20000030

08001eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eec:	b490      	push	{r4, r7}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ef2:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ef4:	1d3c      	adds	r4, r7, #4
 8001ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001efc:	f240 2301 	movw	r3, #513	; 0x201
 8001f00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x40>
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d003      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x46>
 8001f2a:	e02d      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2e:	623b      	str	r3, [r7, #32]
      break;
 8001f30:	e02d      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	0c9b      	lsrs	r3, r3, #18
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f3e:	4413      	add	r3, r2
 8001f40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	0c5b      	lsrs	r3, r3, #17
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f5e:	4413      	add	r3, r2
 8001f60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f6a:	fb02 f203 	mul.w	r2, r2, r3
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
 8001f76:	e004      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f7c:	fb02 f303 	mul.w	r3, r2, r3
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	623b      	str	r3, [r7, #32]
      break;
 8001f86:	e002      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8a:	623b      	str	r3, [r7, #32]
      break;
 8001f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3728      	adds	r7, #40	; 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc90      	pop	{r4, r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	08002820 	.word	0x08002820
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	007a1200 	.word	0x007a1200
 8001fa8:	003d0900 	.word	0x003d0900

08001fac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <RCC_Delay+0x34>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <RCC_Delay+0x38>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	0a5b      	lsrs	r3, r3, #9
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fc8:	bf00      	nop
  }
  while (Delay --);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1e5a      	subs	r2, r3, #1
 8001fce:	60fa      	str	r2, [r7, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f9      	bne.n	8001fc8 <RCC_Delay+0x1c>
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	2000002c 	.word	0x2000002c
 8001fe4:	10624dd3 	.word	0x10624dd3

08001fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e041      	b.n	800207e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff f84e 	bl	80010b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3304      	adds	r3, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f000 fa6a 	bl	8002500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d001      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e035      	b.n	800210c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_TIM_Base_Start_IT+0x90>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d009      	beq.n	80020d6 <HAL_TIM_Base_Start_IT+0x4e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ca:	d004      	beq.n	80020d6 <HAL_TIM_Base_Start_IT+0x4e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a12      	ldr	r2, [pc, #72]	; (800211c <HAL_TIM_Base_Start_IT+0x94>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d111      	bne.n	80020fa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d010      	beq.n	800210a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f8:	e007      	b.n	800210a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40012c00 	.word	0x40012c00
 800211c:	40000400 	.word	0x40000400

08002120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d122      	bne.n	800217c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b02      	cmp	r3, #2
 8002142:	d11b      	bne.n	800217c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0202 	mvn.w	r2, #2
 800214c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f9b1 	bl	80024ca <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f9a4 	bl	80024b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f9b3 	bl	80024dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b04      	cmp	r3, #4
 8002188:	d122      	bne.n	80021d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b04      	cmp	r3, #4
 8002196:	d11b      	bne.n	80021d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0204 	mvn.w	r2, #4
 80021a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f987 	bl	80024ca <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f97a 	bl	80024b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f989 	bl	80024dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0208 	mvn.w	r2, #8
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2204      	movs	r2, #4
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f95d 	bl	80024ca <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f950 	bl	80024b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f95f 	bl	80024dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b10      	cmp	r3, #16
 8002230:	d122      	bne.n	8002278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b10      	cmp	r3, #16
 800223e:	d11b      	bne.n	8002278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0210 	mvn.w	r2, #16
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2208      	movs	r2, #8
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f933 	bl	80024ca <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f926 	bl	80024b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f935 	bl	80024dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0201 	mvn.w	r2, #1
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fb54 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	2b80      	cmp	r3, #128	; 0x80
 80022b0:	d10e      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022bc:	2b80      	cmp	r3, #128	; 0x80
 80022be:	d107      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fa67 	bl	800279e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b40      	cmp	r3, #64	; 0x40
 80022dc:	d10e      	bne.n	80022fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e8:	2b40      	cmp	r3, #64	; 0x40
 80022ea:	d107      	bne.n	80022fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f8f9 	bl	80024ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b20      	cmp	r3, #32
 8002308:	d10e      	bne.n	8002328 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b20      	cmp	r3, #32
 8002316:	d107      	bne.n	8002328 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0220 	mvn.w	r2, #32
 8002320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fa32 	bl	800278c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_TIM_ConfigClockSource+0x18>
 8002344:	2302      	movs	r3, #2
 8002346:	e0b3      	b.n	80024b0 <HAL_TIM_ConfigClockSource+0x180>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800236e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002380:	d03e      	beq.n	8002400 <HAL_TIM_ConfigClockSource+0xd0>
 8002382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002386:	f200 8087 	bhi.w	8002498 <HAL_TIM_ConfigClockSource+0x168>
 800238a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238e:	f000 8085 	beq.w	800249c <HAL_TIM_ConfigClockSource+0x16c>
 8002392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002396:	d87f      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x168>
 8002398:	2b70      	cmp	r3, #112	; 0x70
 800239a:	d01a      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0xa2>
 800239c:	2b70      	cmp	r3, #112	; 0x70
 800239e:	d87b      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x168>
 80023a0:	2b60      	cmp	r3, #96	; 0x60
 80023a2:	d050      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x116>
 80023a4:	2b60      	cmp	r3, #96	; 0x60
 80023a6:	d877      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x168>
 80023a8:	2b50      	cmp	r3, #80	; 0x50
 80023aa:	d03c      	beq.n	8002426 <HAL_TIM_ConfigClockSource+0xf6>
 80023ac:	2b50      	cmp	r3, #80	; 0x50
 80023ae:	d873      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x168>
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d058      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x136>
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d86f      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x168>
 80023b8:	2b30      	cmp	r3, #48	; 0x30
 80023ba:	d064      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x156>
 80023bc:	2b30      	cmp	r3, #48	; 0x30
 80023be:	d86b      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x168>
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d060      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x156>
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d867      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x168>
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d05c      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x156>
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d05a      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023d0:	e062      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6899      	ldr	r1, [r3, #8]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f000 f95c 	bl	800269e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	609a      	str	r2, [r3, #8]
      break;
 80023fe:	e04e      	b.n	800249e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6899      	ldr	r1, [r3, #8]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f000 f945 	bl	800269e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002422:	609a      	str	r2, [r3, #8]
      break;
 8002424:	e03b      	b.n	800249e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	461a      	mov	r2, r3
 8002434:	f000 f8bc 	bl	80025b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2150      	movs	r1, #80	; 0x50
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f913 	bl	800266a <TIM_ITRx_SetConfig>
      break;
 8002444:	e02b      	b.n	800249e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	461a      	mov	r2, r3
 8002454:	f000 f8da 	bl	800260c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2160      	movs	r1, #96	; 0x60
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f903 	bl	800266a <TIM_ITRx_SetConfig>
      break;
 8002464:	e01b      	b.n	800249e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	461a      	mov	r2, r3
 8002474:	f000 f89c 	bl	80025b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2140      	movs	r1, #64	; 0x40
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f8f3 	bl	800266a <TIM_ITRx_SetConfig>
      break;
 8002484:	e00b      	b.n	800249e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	4610      	mov	r0, r2
 8002492:	f000 f8ea 	bl	800266a <TIM_ITRx_SetConfig>
        break;
 8002496:	e002      	b.n	800249e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002498:	bf00      	nop
 800249a:	e000      	b.n	800249e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800249c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <TIM_Base_SetConfig+0xa8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <TIM_Base_SetConfig+0x28>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251e:	d003      	beq.n	8002528 <TIM_Base_SetConfig+0x28>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a22      	ldr	r2, [pc, #136]	; (80025ac <TIM_Base_SetConfig+0xac>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d108      	bne.n	800253a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <TIM_Base_SetConfig+0xa8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <TIM_Base_SetConfig+0x52>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002548:	d003      	beq.n	8002552 <TIM_Base_SetConfig+0x52>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a17      	ldr	r2, [pc, #92]	; (80025ac <TIM_Base_SetConfig+0xac>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d108      	bne.n	8002564 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <TIM_Base_SetConfig+0xa8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d103      	bne.n	8002598 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	615a      	str	r2, [r3, #20]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40000400 	.word	0x40000400

080025b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	f023 0201 	bic.w	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f023 030a 	bic.w	r3, r3, #10
 80025ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	621a      	str	r2, [r3, #32]
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f023 0210 	bic.w	r2, r3, #16
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002636:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	031b      	lsls	r3, r3, #12
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002648:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	621a      	str	r2, [r3, #32]
}
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800266a:	b480      	push	{r7}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	f043 0307 	orr.w	r3, r3, #7
 800268c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	609a      	str	r2, [r3, #8]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800269e:	b480      	push	{r7}
 80026a0:	b087      	sub	sp, #28
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	021a      	lsls	r2, r3, #8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	609a      	str	r2, [r3, #8]
}
 80026d2:	bf00      	nop
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e041      	b.n	8002778 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a14      	ldr	r2, [pc, #80]	; (8002784 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002740:	d004      	beq.n	800274c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a10      	ldr	r2, [pc, #64]	; (8002788 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d10c      	bne.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002752:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	4313      	orrs	r3, r2
 800275c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40012c00 	.word	0x40012c00
 8002788:	40000400 	.word	0x40000400

0800278c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <__libc_init_array>:
 80027b0:	b570      	push	{r4, r5, r6, lr}
 80027b2:	2600      	movs	r6, #0
 80027b4:	4d0c      	ldr	r5, [pc, #48]	; (80027e8 <__libc_init_array+0x38>)
 80027b6:	4c0d      	ldr	r4, [pc, #52]	; (80027ec <__libc_init_array+0x3c>)
 80027b8:	1b64      	subs	r4, r4, r5
 80027ba:	10a4      	asrs	r4, r4, #2
 80027bc:	42a6      	cmp	r6, r4
 80027be:	d109      	bne.n	80027d4 <__libc_init_array+0x24>
 80027c0:	f000 f822 	bl	8002808 <_init>
 80027c4:	2600      	movs	r6, #0
 80027c6:	4d0a      	ldr	r5, [pc, #40]	; (80027f0 <__libc_init_array+0x40>)
 80027c8:	4c0a      	ldr	r4, [pc, #40]	; (80027f4 <__libc_init_array+0x44>)
 80027ca:	1b64      	subs	r4, r4, r5
 80027cc:	10a4      	asrs	r4, r4, #2
 80027ce:	42a6      	cmp	r6, r4
 80027d0:	d105      	bne.n	80027de <__libc_init_array+0x2e>
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
 80027d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d8:	4798      	blx	r3
 80027da:	3601      	adds	r6, #1
 80027dc:	e7ee      	b.n	80027bc <__libc_init_array+0xc>
 80027de:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e2:	4798      	blx	r3
 80027e4:	3601      	adds	r6, #1
 80027e6:	e7f2      	b.n	80027ce <__libc_init_array+0x1e>
 80027e8:	08002840 	.word	0x08002840
 80027ec:	08002840 	.word	0x08002840
 80027f0:	08002840 	.word	0x08002840
 80027f4:	08002844 	.word	0x08002844

080027f8 <memset>:
 80027f8:	4603      	mov	r3, r0
 80027fa:	4402      	add	r2, r0
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d100      	bne.n	8002802 <memset+0xa>
 8002800:	4770      	bx	lr
 8002802:	f803 1b01 	strb.w	r1, [r3], #1
 8002806:	e7f9      	b.n	80027fc <memset+0x4>

08002808 <_init>:
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280a:	bf00      	nop
 800280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280e:	bc08      	pop	{r3}
 8002810:	469e      	mov	lr, r3
 8002812:	4770      	bx	lr

08002814 <_fini>:
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002816:	bf00      	nop
 8002818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281a:	bc08      	pop	{r3}
 800281c:	469e      	mov	lr, r3
 800281e:	4770      	bx	lr
